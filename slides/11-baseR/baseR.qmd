---
title: "base R"
subtitle: "Ein Vergleich mit dem Tidyverse"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 12 - base R" 
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    output-file: baseR_blatt_DE.html
    include-after-body: ../../custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  revealjs: 
    output-file: baseR_folien_DE.html
    include-after-body: ../../custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    number-depth: 1
    toc: false
    toc-depth: 1
    toc-title: 'Überblick'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  pdf:
    toc: true
    toc-depth: 1
    number-sections: true
    colorlinks: true
    code-overflow: wrap
    execute:
      out-width: "80%"
      fig-asp: .618
      fig-align: centre
bibliography: ../../references.bib
csl: ../../apa.csl
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, ## evaluate chunks
                      echo = T, ## 'print code chunk?'
                      message = F, ## 'print messages (e.g., warnings)?'
                      error = T, ## continueeven when error encountered
                      warning = F) ## don't print warnings
```

# Lesungen

- [Kapital 27 (A field guide to base R)](https://r4ds.hadley.nz/base-r) in @wickham_r_2023

- Kurs-Website: [Kap. 12: base R](https://daniela-palleschi.github.io/r4ling/mats/12-baseR.html)

# Lernziele {.unnumbered}

Heute werden wir...

- lernen, was base R ist
- Base R und Tidyverse vergleichen
- die Base-R-Äquivalente der Tidyverse-Verben kennenlernen

# base R

- Basissoftware, die die Programmiersprache R enthält
  - enthält das Paket `base`, das zum Ausführen von R erforderlich ist
- enthält mehrere Pakete wie `utils` und `stats` (neben anderen)
  - wird installiert, wenn Sie R installieren
  
## tidyverse

- das [Tidyverse](https://www.tidyverse.org/) [@tidyverse-package] ist eine Familie von R-Paketen, die das Bereinigen und Verwirren von Daten erleichtern sollen
  - tidyverse-Pakete "haben eine gemeinsame Designphilosophie und eine gemeinsame Grammatik und Datenstruktur, so dass das Erlernen eines Pakets das Erlernen des nächsten erleichtert." [@wickham_welcome_2019]. - tidyverse wurde in der Programmiersprache R geschrieben

## base R vs. tidyverse

- Hauptziel von base R ist Stabilität
  - nicht viele oder häufige Änderungen an der Funktionalität der Funktionen
- tidyverse fügt ständig Funktionen hinzu, aktualisiert sie und ändert sie 

- das bedeutet, dass der Code von tidyverse anfällig für "Brüche" ist: tidyverse-Code, der heute läuft, läuft vielleicht in ein paar Jahren nicht mehr, wenn einige Funktionen oder Argumente "veraltet" sind

## Kontroverse 

- einige Leute bevorzugen die Verwendung von Base R oder Tidyverse
  + Argumente für tidyverse: besser lesbar, aufgeräumter, einfacher für Nicht-Programmierer
  + Argumente für base R: "wahrere" R-Programmierung, stabiler
  
- Im Allgemeinen ist es ratsam, eine gute Kenntnis der einen und zumindest Grundkenntnisse der anderen Methode zu haben.

### Twitter-Debatten

::: {.content-visible when-format="html"}

:::: columns

::: {.column width="40%"}
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">What a thing to say when modern R is pretty much synonymous with the tidyverse for many in the community!<br><br>I was a base R masochist once too.. but there&#39;s no need for statements like this when the tidyverse has helped so many of us be more productive and write more readable code.</p>&mdash; Bodo Winter (@BodoWinter) <a href="https://twitter.com/BodoWinter/status/1612882152483586049?ref_src=twsrc%5Etfw">January 10, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
:::

::: {.column width="60%"}

- In diesem Tweet sehen wir den ursprünglichen Beitrag von Prof. Zorn, der besagt, dass die Kenntnis des Tidyversums nicht gleichbedeutend mit der Kenntnis von R
  + aber es gab viele Antworten, die die Vorteile von Tidyverse hervorhoben
  + von Dozenten, Professoren (wie Bodo Winter, der ein Statistikbuch für Linguisten mit R geschrieben hat [@winter_statistics_2019]) und Datenwissenschaftlern, die in der Industrie arbeiten

:::

::::

:::

::: {.content-visible when-format="pdf"}
- In diesem Tweet sehen wir den ursprünglichen Beitrag von Prof. Zorn, der besagt, dass die Kenntnis des Tidyversums nicht gleichbedeutend mit der Kenntnis von R
  + aber es gab viele Antworten, die die Vorteile von Tidyverse hervorhoben
  + von Dozenten, Professoren (wie Bodo Winter, der ein Statistikbuch für Linguisten mit R geschrieben hat [@winter_statistics_2019]) und Datenwissenschaftlern, die in der Industrie arbeiten
  
```{r}
#| echo: false
#| label: fig-twitter-white
#| fig-cap: A tweet exchange about base R versus the tidyverse (original tweet above, with reply below). [Click here to view tweet.](https://x.com/BodoWinter/status/1612882152483586049?s=20)
#| out-width: "70%"
knitr::include_graphics(
  here::here("media", "twitter_baser_tidyverse_white.png")
)  
```
:::


```{r}
#| eval: false
#| echo: false
#| label: fig-twitter
#| fig-cap: A tweet (A) with a reply in support of the tidyverse, with two other replies pointing out the benefits of the tidyverse (B) and its use in industry (C)
#| fig-height: 8

library(ggpubr)
library(grid)
library(png)


tweet_bodo <- readPNG(
  here::here("media", "twitter_baser_tidyverse.png")
)  

tweet_cleaner <- readPNG(
  here::here("media", "twitter_cleaner.png")
)

tweet_industry <- readPNG(
  here::here("media", "twitter_industry.png")
)

ggarrange(rasterGrob(tweet_bodo, width = .65),
          rasterGrob(tweet_cleaner, width = .65),
          rasterGrob(tweet_industry, width = .65), 
          ncol = 1,
          labels = c("A","B","C"),
          heights = c(0.5, 1/4,1/4))
```

## Meine Vorliebe

- Ich denke natürlich, dass das Erlernen des Tidyverse wichtig ist
  + das Tidyverse ist menschenzentriert, und wir sind keine Programmierer oder Informatiker
- nicht jeder stimmt mir zu, aber es gibt auch viele Leute, die mir zustimmen

# Set-up

```{r}
pacman::p_load(
  tidyverse,
  here
)
```

```{r}
#| echo: false
pacman::p_load(janitor,
               patchwork)
```


## Daten einlesen

- Jetzt sehen wir unseren ersten Vergleich zwischen dem tidyverse-Code und dem Basis-R-Code

## CSV: tidyverse

```{r filename = "tidyverse"}
df_tidy <-
  read_csv(
    here("daten", "languageR_english.csv")
  )
```

## CSV: base R

```{r filename = "base R"}
df_base <-
  read.csv(
    here("daten", "languageR_english.csv")
  )
```

## Vergleich der Ergebnisse

- wie viele Spalten?

```{r}
#| output-location: column-fragment
length(df_tidy)
```

```{r}
#| output-location: column-fragment
length(df_base)
```

- Wie lauten die Spaltennamen?

```{r}
#| output-location: column-fragment
names(df_base)
```

```{r}
#| output-location: column-fragment
names(df_tidy)
```

- wie viele Zeilen?

```{r}
#| output-location: column-fragment
nrow(df_tidy)
```

```{r}
#| output-location: column-fragment
nrow(df_base)
```

- die Datenstruktur ist identisch

# Mit Spalten und Zeilen hantieren

- sehen wir uns die Basis-R-Alternativen zu den gebräuchlichsten `dplyr`-Verben an

## Variablen extrahieren: tidyverse

```{r filename = "tidyverse"}
#| eval: false
df_tidy |> 
  select(AgeSubject)
```

```{r filename = "tidyverse"}
#| echo: false
df_tidy |> 
  select(AgeSubject) |> 
  head(10)
```

## Variablen extrahieren: base R

- das Dollarzeichen (`$`) kann verwendet werden, um eine Spalte aus einem Datenrahmen (oder Tibble) zu extrahieren
- dies ergibt einen Vektor, während `dplyr::select()` die Datenrahmen-/Tibble-Attribute der Spalte beibehält

```{r filename = "base R"}
#| eval: false
df_base$AgeSubject
```

```{r filename = "base R"}
#| echo: false
head(df_base$AgeSubject,18)
```

## Variablen extrahieren: base R

- oder wir können `Datenrahmen[Zeile,Spalte]` verwenden 
- wir können den Namen einer Spalte in Anführungszeichen setzen

```{r filename = "base R"}
#| eval: false
# using variable name
df_base[,"AgeSubject"]
```

```{r}
#| echo: false
# using variable name
head(df_base[,"AgeSubject"],18)
```

- oder wir können den Index der Spalte angeben, wobei 1 für die erste Spalte steht, 2 für die zweite Spalte und so weiter

```{r filename = "base R"}
#| eval: false
# using variable index
df_base[,1]
```

```{r}
#| echo: false
# using variable index
head(df_base[,1],18)
```

## Mehrere Variablen: tidyverse

```{r filename = "tidyverse"}
#| eval: false
df_tidy |> 
  select(AgeSubject, RTlexdec)
```

```{r}
#| echo: false
df_tidy |> 
  select(AgeSubject, RTlexdec) |> 
  head(10)
```

## Mehrere Variablen: baseR



:::: columns

::: {.column width="100%"}
- dafür brauchen wir `c()`
:::

::: {.column width="50%"}

```{r filename = "base R"}
#| eval: false
# using variable name
df_base[,c("AgeSubject", "RTlexdec")]
```

```{r}
#| echo: false
# using variable name
df_base[,c("AgeSubject", "RTlexdec")] |> 
  head(10)
```
:::


::: {.column width="50%"}

```{r filename = "base R"}
#| eval: false
# using variable index
df_base[,c(1, 6)]
```

```{r}
#| echo: false
# using variable index
df_base[,c(1, 6)] |>  head(10)
```
:::

::::

## Extrahieren/Filtern von Beobachtungen: tidyverse

- mit der Funktion `filter()` von `dplyr`

```{r filename = "tidyverse"}
df_tidy |> 
  filter(RTlexdec > 600 & RTnaming < 480)
```

## Extrahieren/Filtern von Beobachtungen: base R

- fügen Sie diese bedingten Anweisungen in `[,]` ein
  + wir müssen den Datenrahmennamen mit dem Dollarzeichen vor dem Spaltennamen einschließen

```{r filename = "base R"}
#| eval: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,]
```

```{r}
#| echo: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,] |> 
  head(10)
```


## Einzelne Datenpunkte auswählen: tidyverse

- Filter()` und Select()` verwenden (was wir schon vorher gemacht haben)

```{r filename = "tidyverse"}
#| eval: false
df_tidy |> 
  filter(RTlexdec > 600, RTnaming < 480) |> 
  select(AgeSubject, RTlexdec)
```

```{r}
#| echo: false
df_tidy |> 
  filter(RTlexdec > 600, RTnaming < 480) |> 
  select(AgeSubject, RTlexdec) |> 
  head(10)
```

## Einzelne Datenpunkte auswählen: base R

- Zeilen- und Spaltenwerte in `[,]` kombinieren

```{r filename = "base R"}
#| eval: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c("AgeSubject", "RTlexdec")]
```

```{r}
#| echo: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c("AgeSubject", "RTlexdec")] |> 
  head(10)
```

## Einzelne Datenpunkte auswählen: base R

- Auch hier können Sie die Spaltennamen durch den Indexwert ersetzen

```{r filename = "base R"}
#| eval: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c(1, 6)]
```

```{r}
#| echo: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c(1, 6)] |> 
  head(10)
```

## Neue Variablen erstellen: tidyverse

- mit der Funktion `mutate()` von `dplyr`

```{r filename = "tidyverse"}
df_tidy |> 
  mutate(rt_lexdec_s = RTlexdec/1000)
```

## Neue Variablen erstellen: tidyverse

- Definieren Sie den Namen der neuen Variable (mit `dataframe$variable`) und weisen Sie den Wert mit dem Zuweisungsoperator `<-` zu

```{r filename = "base R"}
df_base$rt_lexdec_s <- df_base$RTlexdec/1000
```

## Zusammenfassen: tidyverse

- `Zusammenfassen()` von `dplyr`

```{r filename = "tidyverse"}
  df_tidy |> 
  summarise(
    mean_lexdec = mean(RTlexdec),
    sd_lexdec = sd(RTlexdec),
    mean_naming = mean(RTnaming, na.rm = T),
    sd_naming = sd(RTnaming, na.rm = T)
  )
```

## Zusammenfassen: tidyverse

- wir müssen neue Objekte erstellen, die den Wert jeder Operation enthalten, und sie mit der Funktion "data.frame()" zu einem Datenrahmen zusammenfassen
- Es gibt viele alternative Möglichkeiten, dies zu tun, aber dies ist die einfachste, wenn wir nur ein paar zusammenfassende Statistiken erstellen wollen

```{r filename = "base R"}
data.frame(mean_lexdec = mean(df_base$RTlexdec),
           sd_lexdec = sd(df_base$RTlexdec),
           mean_naming = mean(df_base$RTnaming, na.rm = T),
           sd_naming = sd(df_base$RTnaming, na.rm = T))
```


# Plots

- `ggplot2` ist auch bei Leuten beliebt, die tidyverse nicht benutzen 
  + das liegt daran, dass es einige nützliche Funktionen und ein sauberes Aussehen hat

## Plots: base R

:::: columns

::: {.column width="100%"}

- kann nützlich sein, wenn Sie einfache Diagramme erstellen wollen, um einen ersten Blick auf Ihre Daten zu erhalten
  + Die nützlichsten Funktionen sind "hist()" und "plot()".
  + Beachten Sie, dass diese Funktionen mit Vektoren arbeiten, weshalb wir `$` verwenden müssen, um die Spalten aus dem Datenrahmen zu extrahieren.
  
:::

::: {.column width="50%"}
```{r}
#| output-location: fragment

hist(df_base$RTlexdec)
```
:::


::: {.column width="50%"}
```{r}
#| output-location: fragment

plot(df_base$RTlexdec, df_base$RTnaming) 
```
:::
::::

## Plots: tidyverse

- wie wir es schon gesehen haben:

```{r}
#| label: fig-ggplot
#| fig-cap: Histogram and scatterplot with ggplot2
#| output-location: column-fragment

library(patchwork)

# histogram
fig_hist <- 
  df_base |> 
  ggplot() +
  aes(x = RTlexdec) +
  geom_histogram()

# scatter plot
fig_scatter <-
  df_base |> 
  ggplot() +
  aes(x = RTlexdec, y = RTnaming) +
  geom_point() 
  
fig_hist + fig_scatter
```

# Lernziele 🏁 {.unnumbered .unlisted}

Heute haben wir...

- gelernt, was Base R ist ✅
- Base R und Tidyverse verglichen ✅
- lernen die Base R-Entsprechungen gängiger Tidyverse-Verben ✅

# Aufgaben

Konvertieren Sie den folgenden tidyverse-Code in Base R. Wir werden wieder den Datensatz "languageR_english.csv" verwenden.

## Daten einlesen

```{r}
df_eng <- 
  read_csv(here("daten", "languageR_english.csv"))
```

## Extrahieren von Spalten

```{r}
#| eval: false
df_eng |> 
  select(Word, WrittenFrequency)
```

```{r}
#| echo: false
df_eng |> 
  select(Word, WrittenFrequency) |> 
  head(10)
```

## Zeilen filtern

```{r}
#| eval: false
df_eng |> 
  filter(WrittenFrequency > 5.6)
```

```{r}
#| echo: false
df_eng |> 
  filter(WrittenFrequency > 5.6) |> 
  head(10)
```

## Filterung von Zeilen und Extraktion von Spalten

```{r}
#| eval: false
df_eng |> 
  filter(WrittenFrequency > 5.6 & AgeSubject == "old") |> 
  select(AgeSubject, Word, WrittenFrequency) 
```

```{r}
#| echo: false
df_eng |> 
  filter(WrittenFrequency > 5.6 & AgeSubject == "old") |> 
  select(AgeSubject, Word, WrittenFrequency) |> 
  head(10)
```

## Streudiagramm

```{r}
df_eng |> 
  ggplot() +
  aes(x = WrittenFrequency, y = RTlexdec) +
  geom_point()
```

## Tidyverse versus Basis-R

Wie ist Ihr Eindruck von Base R im Vergleich zu Tidyverse? Würden Sie, basierend auf dem, was Sie gesehen haben, das eine dem anderen vorziehen, oder würden Sie das eine nur in bestimmten Fällen vorziehen? Hier gibt es keine richtige Antwort.


# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```


Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.9.0.463 (Desert Sunflower).

```{r}
print(sessionInfo(),locale = F)
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::











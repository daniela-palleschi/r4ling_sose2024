---
title: "Data Transformation"
subtitle: "Working with rows and columns"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 5 - Data Transformation" 
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    output-file: wrangling1_blatt_EN.html
    include-after-body: custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
  revealjs: 
    output-file: wrangling1_folien_EN.html
    include-after-body: custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    number-depth: 1
    toc: true
    toc-depth: 1
    toc-title: 'Überblick'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
  pdf:
    output-file: wrangling1_EN.pdf
    toc: true
    number-sections: true
    colorlinks: true
    code-overflow: wrap
bibliography: references/references.bib
csl: references/apa.csl
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = T, cache = F}
#| echo: false
# Create references.json file based on the citations in this script
# make sure you have 'bibliography: references.json' in the YAML
# rbbt::bbt_update_bib("_wrangling1_EN.qmd")
```

# Wiederholung {.unnumbered}

Letze Woche haben wir...

- gelernt, wie man einen neuen Datensatz in Augenschein nimmt
- gelernt, wie man verschiedene Datentypen importiert
- gelernt, wie man Daten von Hand eingibt
- einen neuen Datensatz visualisiert

# Heutige Ziele {.unnumbered}

Today we will...

- learn how to wrangle data using the `dplyr` package from the `tidyverse`
- learn to use uses the `pipe` (` |> `) to feed the result of one function into another function
- learn about functions that operate on rows
- learn about functions that operate on columns
- learn how to combine `dplyr` functions with plots from `ggplot2`

## Lust auf mehr? {.unnumbered .unlisted}

- [Ch. 4](https://r4ds.hadley.nz/data-transform.html) in @wickham_r_nodate
- [Ch. 9](https://psyteachr.github.io/ads-v2/09-wrangle.html) in @nordmann_applied_2022

# Pre-requisites

1. Fresh Quarto document
    - create a new Quarto document for today's class
      - File > New Document > Quarto Document, named something like `04-wrangling`
    - set up the YAML: title, your name, add a `toc`

```{r}
#| eval: false
#| code-line-numbers: false
title: "Data wrangling"
subtitle: "Transforming data"
author: "Your name here"
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
```

::: {.content-visible when-format="revealjs"}
## Pre-requisites {.unlisted .unnumbered}
:::

2. Packages
    - today's packages are:
      - `tidyverse`: for wrangling (`dplyr`) and plotting (`ggplot2`)
      - `languageR`: for linguistic datasets

```{r}
library(tidyverse)
library(languageR)
```

3. Data
    - we're working again with the `lexdec` dataset from the `languageR` package [@languageR-package]
    - store it as an object with the name `df_lexdec`
    - we also transform the `RT` variable so that it is in milliseconds (it was previously in log milliseconds, but don't worry about understanding what that means)
    - and we choose 10 variables that are relevant for us today
    
```{r}
df_lexdec <- lexdec |> 
  mutate(RT = exp(RT)) |> 
  select(Subject, RT, Trial, Sex, NativeLanguage, Correct, Word, Frequency, Class, Length)
```



::: {.content-visible when-format="revealjs"}
##  {.unlisted .unnumbered}

::: {.callout-important appearance="simple"}
### Render Break!
::: nonincremental
Take a moment to render your document. Did it render?

- does it have a title?
- does it have your name?
- does it have a header for 'packages'?
- add a header for 'Data Wrangling'

:::

:::

:::

# Data Wrangling

- in English, wrangling refers to a long, difficult process
  + e.g., cowboys wrangle their cattle or herd (gather, collect their animals)
- there are two major parts of wrangling
  + transforming: sorting or creating new variables (what we'll do today)
  + tidying: reshaping or structuring your data (we'll do this in a few weeks)
- both data tidying and transforming require the `dplyr` package from the `tidyverse`
  + `dplyr` functions are often referred to as verbs, because they *do* something

::: {.content-visible when-format="revealjs"}
## `dplyr` {.unlisted .unnumbered}
:::

::: callout-tip

# The `dplyr` name
  + the `dplyr` name comes from a previous package, `plyr` which is used to split apart, apply functions to, and combine data
    + in English, `plyr` sounds like the word for pliers ("pliers"), which are used to pry things apart, like what `plyr` does with data
    + the `d` in `dplyr` was added because the package is specifically for working with data frames
    
:::

## `lexdec`

- the `lexdec` dataset contains data for a lexical decision task in English
  + let's take a look at the dataset using the `head()` function, which just prints the first 6 rows
    + here we're telling it to print the first 10 rows

```{r}
#| eval: false
#| echo: false

head(df_lexdec, n = 10)
```


- in my materials I often use the `head()` function to avoid printing the whole dataset in the output, but you wouldn't generally want to use `head()` when looking at your data, you'd want to look at your whole dataset

::: {.content-visible when-format="revealjs"}
## Aufgabe {.unlisted .unnumbered}
:::

::: callout-tip

### [Aufgabe @exm-df_lexent]: `df_lexdec`
::: {#exm-df_lexent .custom}
::: nonincremental
1. Look at the dataset
    + how many observations are there?
    + how many variables are there?
2. Feed the dataset into the `glimpse()` function
    + what does this show you?
    + how does it compare to what you see when you use `summary()`?

:::
:::
:::


## `dplyr` basics

- today we'll learn some of the primary `dplyr` verbs (functions) that allow us to solve the majority of our data manipulation challenges
  + I use these verbs multiple times in probably every analysis script
- `dplyr` verbs have some things in common:
    1. the first argument is always a data frame
    2. the following arguments typically describe which columns to be operated on, using the variable name (without quotation marks)
    3. the output is always a new dataframe
  
- the verbs all do one thing well, so we often want to use multiple verbs at once
  + we use the pipe to do this (`|>` or `|>`)
  + we've already seen this pipe when we feed a dataframe into `ggplot()`
  + we can read the pipe as `and then`

::: {.content-visible when-format="revealjs"}
## `dplyr` basics
:::

- in the following code, identify
  + the data frame
  + `dplyr` verbs
  + variable names
- can you try to read out (guess) what the following code does?

```{r}
#| eval: false
df_lexdec |> 
  filter(Subject == "A1") |> 
  select(Subject, Trial, RT, NativeLanguage, Word) |> 
  relocate(NativeLanguage, .after = Trial)
```

::: {.content-visible when-format="revealjs"}

```{r}
#| eval: false
df_lexdec |> 
  filter(Subject == "A1") |> 
  select(Subject, Trial, RT, NativeLanguage, Word) |> 
  relocate(NativeLanguage, .after = Trial)
```

:::

- note that `A1` is written with quotation marks, but none of the other code is
  + when calling on an object (e.g., `df_lexdec`) or its variables (e.g., `Subject`), we do not wrap them in quotation marks
  + when we are calling on a certain *value* of a variable that is not numerical, we must wrap this value in quotation marks
  + because the Subject ID `A1` is a value of the variable `Subject`, we must use quotation marks around it
- try removing the quotation marks, what error message do you get?
- try adding quotation marks around a variable name, what error message do you get?
  + this is an important exercise, because you will often find your code will not run, but the solution is often something as simple as missing or extra quotation marks or punctuation

::: {.content-visible when-format="revealjs"}
##  {.unlisted .unnumbered}

::: {.callout-important appearance="simple"}
### Render Break!
::: nonincremental
Take a moment to render your document. Does it render?

Can you organise the document better? E.g., adding more headers, text?

:::

:::

:::

# Rows

- in tidy data, rows represent observations

- the most important verbs for rows are:
  + `filter()`: changes which rows are present
  + `arrange()`: changes the order of rows

## `filter()`

- changes which rows are present without changing their order
- takes the dataframe as first argument
  + following arguments are conditions that must be `TRUE` to keep the row
  
::: {.content-visible when-format="revealjs"}
## `filter()` {.unlisted .unnumbered}
:::
  
- find all reaction times that were longer than 450 milliseconds:

```{r}
#| output-location: fragment
df_lexdec |> 
  filter(RT > 450) |> 
  head()
```

- notice that we don't put the reaction time value in quotation marks, because it is *numerical*

::: {.content-visible when-format="revealjs"}
## `filter()` {.unlisted .unnumbered}
:::

- if you want to save the filtered data, it's usually wise to save it with a *new* object name
  + unless you want to overwrite the pre-filtered version, a new name is necessary

```{r}
df_lexdec_450 <- 
  df_lexdec |> 
  filter(RT > 450)
```

::: {.content-visible when-format="revealjs"}
## Logical operators {.unlisted .unnumbered}
:::

::: callout-note

### Logical operators
::: nonincremental
-   symbols used to describe a logical condition
  -   `==` *is idential* (`1 == 1`)
  -   `!=` *is not identical* (`1 != 2`)
  -   `>` *is greater than* (`2 > 1`)
  -   `<` *is less than* (`1 < 2`)
- to combine conditions
  -   `&` or `,` *and also* (for multiple conditions)
  -   `|` *or* (for multiple conditions)

- there's a nice shortcut for cominbing `==` and `|`: `%in%`
  + keeps rows where the variable equals one of the values on the right

::: panel-tabset
### `==` and `|`
```{r}
df_lexdec |> 
  filter(Trial == 30 | Trial == 23)
```

### `%in%`
```{r}
df_lexdec |> 
  filter(Trial %in% c(30, 23))
```
:::
:::
:::

::: {.content-visible when-format="revealjs"}
## Aufgabe {.unlisted .unnumbered}
:::

::: callout-tip

### [Aufgabe @exm-filter]: `filter()`
::: {#exm-filter .custom}
::: nonincremental
1. Filter the data to include rows from Trial 25 and non-native English speakers (`other`)
2. How many rows are there?
:::
:::
:::

```{r}
#| eval: false
#| echo: false

# 1, 2
df_lexdec |> 
  filter(Trial == 25,
         NativeLanguage == "Other") |> 
  count()
```


## `arrange()`

- changes the order of the rows based on a value in a column(s)

```{r}
#| output-location: fragment
df_lexdec |> 
  arrange(RT) |> 
  head()
```

::: {.content-visible when-format="revealjs"}
## `arrange()` {.unlisted .unnumbered}
:::

- if you use more than one column name, each additional column will be used to break ties between values of the preceding columns

```{r}
#| output-location: fragment
df_lexdec |> 
  arrange(Length,Sex) |> 
  head(10)
```

::: {.content-visible when-format="revealjs"}
## `arrange()` {.unlisted .unnumbered}
:::

- we can add `desc()` inside `arrange()` to use descending order (big-to-small) instead of the default ascending order

```{r}
#| output-location: fragment
df_lexdec |> 
  arrange(desc(Length)) |> 
  head()
```

::: {.content-visible when-format="revealjs"}
## Aufgabe {.unlisted .unnumbered}
:::

::: callout-tip

### [Aufgabe @exm-arrange]: `arrange()`
::: {#exm-arrange .custom}
::: nonincremental
1. Filter the data to include observations from only the `Subject` M1 and W2, *and then*
2. Arrange the data by descending reaction times
  
```{r}
#| eval: false
#| echo: false

df_lexdec |> 
  filter(Subject %in% c("M1", "W2")) |> 
  arrange(desc(RT)) |> 
  head()
```
:::
:::
:::

::: {.content-visible when-format="revealjs"}
##  {.unlisted .unnumbered}

::: {.callout-important appearance="simple"}
### Render Break!
::: nonincremental
Take a moment to render your document. Does it render?

Can you organise the document better? E.g., adding more headers, text?

:::

:::

:::

# Columns

- in tidy data, columns represent variables

- the most important verbs for columns are:
  + `rename()`: changes the names of the columns
  + `mutate()`: creates new columns that are derived from the existing columns
  + `select()`: changes which columns are present
  + `relocate()`: changes the positions of the columns

## `rename()`

- `rename()` lets us change the name of columns
  + the order of the arguments is `new_name` = `old_name`
  
- let's try changing some of the variable names to German
  + I tend to create variable names with lower case, as a coding convention
  
```{r}
# single variable
df_lexent <- 
  df_lexdec |>
  rename(teilnehmer = Subject)

# or multiple variables at once
df_lexent <- 
  df_lexdec |> 
 rename(teilnehmer = Subject,
        rz_ms = RT,
        geschlect = Sex,
        laenge = Length)
```

## `mutate()`

- `mutate()` creates new columns from existing columns
  + e.g., we can perform basic algebra on the values in each column

```{r}
#| output-location: fragment
df_lexent |> 
  mutate(
    rz_laenge = rz_ms / laenge,
  ) |> 
  head()
```

::: {.content-visible when-format="revealjs"}
## `mutate()` {.unlisted .unnumbered}
:::

- `mutate()` adds these new columns to the right of your dataset
  + this makes it difficult to see what's happening
- to control where the new column is added, we can use `.before` or `.after`

```{r}
#| output-location: fragment
df_lexent |> 
  mutate(
    rz_laenge = rz_ms / laenge,
    .after = rz_ms
  ) |> 
  head()
```

::: {.content-visible when-format="revealjs"}
##  {.unlisted .unnumbered}

::: {.callout-important appearance="simple"}
### Render Break!
::: nonincremental
Take a moment to render your document. Does it render?

Can you organise the document better? E.g., adding more headers, text?

:::

:::

:::

## Exercise

1. Create a new variable called `rz_s` in `df_lexent`:
    - equals `rz_ms` divided by 1000 (i.e., converts milliseconds to seconds)
    - appears after `rz_ms`
2. Render your document

```{r}
#| echo: false
#| eval: true
df_lexent <-
  df_lexent |> 
  mutate(
    rz_s = rz_ms / 1000,
    .after = rz_ms
  )
```


## `select()`

- `select()` subsets the data to include only the columns you want

- select columns by name

```{r}
#| output-location: fragment
df_lexent |> 
  select(teilnehmer, rz_ms, Word) |> 
  head()
```

::: {.content-visible when-format="revealjs"}
## `select()` {.unlisted .unnumbered}
:::

- select all columns between `rz_ms` and `geschlecht`

```{r}
#| output-location: fragment
df_lexent |> 
  select(rz_ms:geschlect) |> 
  head()
```

::: {.content-visible when-format="revealjs"}
## `select()` {.unlisted .unnumbered}
:::

- select all columns except `rz_s` (`!` is read as "not")

```{r}
#| output-location: fragment
df_lexent |> 
  select(!rz_s) |> 
  head()
```

## `select()` helper functions

- some helper functions that make life easier when working with `select()`:
  + `starts_with("abc")`: selects columns that begin with a certain string of characters
  + `ends_with("xyz")`: selects columns that end with a certain string of characters
  + `contains("ijk")`: selects columns that contain a certain string of characters
  + `where(is.character)`: selects columns that match a logical criteria
    + e.g., the function `is.character()` returns the value `TRUE` when a variable contains character strings, not numerical values or categories

:::: columns

::: {.column width="50%"}
```{r}
#| output-location: fragment
df_lexent |> 
  select(starts_with("w")) |> 
  head()
```
:::

::: {.column width="50%"}
```{r}
#| output-location: fragment
df_lexent |> 
  select(ends_with("er")) |> 
  head()
```
:::
::::

::: {.content-visible when-format="revealjs"}
## Aufgabe {.unlisted .unnumbered}
:::

::: callout-tip

### [Aufgabe @exm-select]: `select()`
::: {#exm-select .custom}
::: nonincremental

1. Print the columns in `df_lexent` that begin with "t"
2. Print the columns in `df_lexent` that contain "ge"
3. Print the columns in `df_lexent` that
    + begin with begin with "r", and
    + end with "s"

:::
:::
:::
  
```{r}
#| echo: false
#| eval: false

# 1
df_lexent |>
  select(starts_with("t")) |> 
  head()
# 2
df_lexent |>
  select(contains("ge")) |> 
  head()
# 3
df_lexent |>
  select(starts_with("r"),
         ends_with("s")) |> 
  head()
```


## `relocate()`

- `relocate()` moves variables around
  + by default, it moves them to the front

```{r}
#| output-location: fragment
df_lexent |> relocate(Trial) |> 
  head()
```

::: {.content-visible when-format="revealjs"}
## `relocate()` {.unlisted .unnumbered}
:::

- but we can also use `.before` or `.after` to place a variable

```{r}
#| output-location: fragment
df_lexent |> 
  relocate(Trial, .after = teilnehmer) |> 
  head()
```

# `dplyr` and `ggplot2`

- we can change a dataset using the `dplyr` verbs, and then feed these changes into `ggplot2`

- what will the following code produce?

```{r}
#| output-location: column-fragment
df_lexent |> 
  # filter the data
  filter(rz_ms > 120,
         rz_ms > 500) |> 
  # plot the filtered data
  ggplot(aes(x = fct_infreq(Correct))) +
  geom_bar() +
  theme_minimal()
```

- important: we can use pipes (` |> `) to perform additional verbs/functions
  + but the `ggplot()` function uses `+` to add new *layers* to the plot
  
::: {.content-visible when-format="revealjs"}
##  {.unlisted .unnumbered}

::: {.callout-important appearance="simple"}
### Render Break!
::: nonincremental
Take a moment to render your document. Does it render?

Can you organise the document better? E.g., adding more headers, text?

:::

:::

:::

## Exercises

::: nonincremental

1. In a single pipeline, print `df_lexent` where you `select` only the reaction times (in milliseconds), NativeLanguage, and Word columns for rows that meet each of the following conditions, `arrange` them in order of reaction times, and `filter` them to include only:
    - reaction times were greater than 500ms *and* less than 550ms
    - were from the words "pear", "elephant", or "tortoise"

```{r}
#| eval: false
#| echo: false

df_lexent |>
  select(rz_ms, NativeLanguage, Word) |> 
  arrange(rz_ms) |> 
  filter(rz_ms <= 550 & rz_ms > 500,
         Word %in% c("tortoise", "elephant", "pear")) 
```


2. Sort `df_lexent` in descending order to find the trials with longest reaction times.

```{r}
#| eval: false
#| echo: false

df_lexent |> 
  arrange(desc(rz_ms)) 
```

:::

::: {.content-visible when-format="revealjs"}
## {.unlisted unnumbered}
:::

::: nonincremental
3. In a single pipeline, store a new object called `df_rz` which contains `df_lexent`, *and then*:
    + select the variables `teilnehmer`, `NativeLanguage`, `Word`, `rz_s`, `laenge`, and `Frequency`
    + create a new variable `rz_s_laenge`, that is `rz_s` divided by `laenge`
      + and is placed before `laenge`
    + rename these variables in English so that they are in German (and with lower case)

```{r}
#| echo: false
df_rz <- 
  df_lexent |> 
  select(teilnehmer, NativeLanguage, Word, rz_s, laenge, Frequency) |> 
  mutate(rz_s_laenge = rz_s/laenge, .before = laenge) |> 
  rename(muttersprache = NativeLanguage,
         wort = Word,
         frequenz = Frequency) # etcetera
```
:::

# Heutige Ziele 🏁 {.unnumbered .unlisted}

Today we learned...

- how to wrangle data using the `dplyr` package from the `tidyverse` ✅
- learn to use uses the `pipe` (` |> `) to feed the result of one function into another function ✅
- about functions that operate on rows ✅
- about functions that operate on columns ✅
- how to combine `dplyr` functions with plots from `ggplot2` ✅

# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```


Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.9.0.463 (Desert Sunflower).

```{r}
sessionInfo()
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::
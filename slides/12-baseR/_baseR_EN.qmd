---
title: "Datenvisualisierung 3"
subtitle: "Darstellung der zusammenfassenden Statistik"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 10 - Datenvisualisierung 3" 
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    output-file: data_viz2_blatt_EN.html
    include-after-body: ../../custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  revealjs: 
    output-file: data_viz2_folien_EN.html
    include-after-body: ../../custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    number-depth: 1
    toc: false
    toc-depth: 1
    toc-title: 'Überblick'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  pdf:
    toc: true
    toc-depth: 1
    number-sections: true
    colorlinks: true
    code-overflow: wrap
    execute:
      out-width: "80%"
      fig-asp: .618
      fig-align: centre
bibliography: ../../references.bib
csl: ../../apa.csl
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, ## evaluate chunks
                      echo = T, ## 'print code chunk?'
                      message = F, ## 'print messages (e.g., warnings)?'
                      error = T, ## continueeven when error encountered
                      warning = F) ## don't print warnings
```

# Readings

- [Kapital 27 (A field guide to base R)](https://r4ds.hadley.nz/base-r) in @wickham_r_2023

- course website: [Ch. 12: base R](https://daniela-palleschi.github.io/r4ling/mats/12-baseR.html)

# Learning objectives {.unnumbered}

Today we will...

- learn what base R is
- compare base R and tidyverse
- learn base R equivalents of tidyverse verbs

# base R

- basic software containing the R programming languag
  - contains the `base` package which is required to run R
- includes several packages such as `utils` and `stats` (among others)
  - installed when you install R
  
## tidyverse

- the [Tidyverse](https://www.tidyverse.org/) [@tidyverse-package] is a family of R-packages designed to facilitate cleaning and wrangling data
  - tidyverse packages "haben eine gemeinsame Designphilosophie und eine gemeinsame Grammatik und Datenstruktur, so dass das Erlernen eines Pakets das Erlernen des nächsten erleichtert." [@wickham_welcome_2019]. - tidyverse was written in the R programming language

## base R vs. tidyverse

- main goal of base R is stability
  - not many or often changes to functionality of functions
- the tidyverse is constantly adding, updating, and changing functions 

- this means that tidyverse code is prone to "breaking": tidyverse code that runs today might not run in a few years if some functions or arguments have been "deprecated"

## Controversy 

- some people strongly prefer to use base R or the tidyverse
  + arguments for tidyverse: more human-readable, tidier, simpler for non-programmers
  + arguments for base R: "truer" R-programming, more stable
  
- generally, having a strong background in one and at least a basic literacy of the other is wise

### Twitter debates

::: {.content-visible when-format="html"}

:::: columns

::: {.column width="40%"}
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">What a thing to say when modern R is pretty much synonymous with the tidyverse for many in the community!<br><br>I was a base R masochist once too.. but there&#39;s no need for statements like this when the tidyverse has helped so many of us be more productive and write more readable code.</p>&mdash; Bodo Winter (@BodoWinter) <a href="https://twitter.com/BodoWinter/status/1612882152483586049?ref_src=twsrc%5Etfw">January 10, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
:::

::: {.column width="60%"}

- in this Tweet we see the original post from Prof. Zorn stating that knowing the tidyverse does not equate knowing R
  + but there were many replies highlighting the benefits of the tidyverse
  + from instructors, professors (like Bodo Winter, who wrote a statistics books for linguists using R [@winter_statistics_2019]), and data scientists working in industry

:::

::::

:::

::: {.content-visible when-format="pdf"}
- in this Tweet we see the original post from Prof. Zorn stating that knowing the tidyverse does not equate knowing R
  + but there were many replies highlighting the benefits of the tidyverse
  + from instructors, professors (like Bodo Winter, who wrote a statistics books for linguists using R), and data scientists working in industry
  
```{r}
#| echo: false
#| label: fig-twitter-white
#| fig-cap: A tweet exchange about base R versus the tidyverse (original tweet above, with reply below). [Click here to view tweet.](https://x.com/BodoWinter/status/1612882152483586049?s=20)
#| out-width: "70%"
knitr::include_graphics(
  here::here("media", "twitter_baser_tidyverse_white.png")
)  
```
:::


```{r}
#| eval: false
#| echo: false
#| label: fig-twitter
#| fig-cap: A tweet (A) with a reply in support of the tidyverse, with two other replies pointing out the benefits of the tidyverse (B) and its use in industry (C)
#| fig-height: 8

library(ggpubr)
library(grid)
library(png)


tweet_bodo <- readPNG(
  here::here("media", "twitter_baser_tidyverse.png")
)  

tweet_cleaner <- readPNG(
  here::here("media", "twitter_cleaner.png")
)

tweet_industry <- readPNG(
  here::here("media", "twitter_industry.png")
)

ggarrange(rasterGrob(tweet_bodo, width = .65),
          rasterGrob(tweet_cleaner, width = .65),
          rasterGrob(tweet_industry, width = .65), 
          ncol = 1,
          labels = c("A","B","C"),
          heights = c(0.5, 1/4,1/4))
```

## My preference

- I obviously think learning the tidyverse is important
  + the tidyverse is human centred, and we are not programmers or computer scientists
- not everybody agrees with me, but there are also a lot of people who do

# Set-up

```{r}
pacman::p_load(
  tidyverse,
  here
)
```

```{r}
#| echo: false
pacman::p_load(janitor,
               patchwork)
```


## Read in data

- we'll now see our first comparison of tidyverse code versus base R code

## CSV: tidyverse

```{r filename = "tidyverse"}
df_tidy <-
  read_csv(
    here("daten", "languageR_english.csv")
  )
```

## CSV: base R

```{r filename = "base R"}
df_base <-
  read.csv(
    here("daten", "languageR_english.csv")
  )
```

## Comparing outcome

- how many columns?

```{r}
#| output-location: column-fragment
length(df_tidy)
```

```{r}
#| output-location: column-fragment
length(df_base)
```

- what are the column names?

```{r}
#| output-location: column-fragment
names(df_base)
```

```{r}
#| output-location: column-fragment
names(df_tidy)
```

- how many rows?

```{r}
#| output-location: column-fragment
nrow(df_tidy)
```

```{r}
#| output-location: column-fragment
nrow(df_base)
```

- the data structure is identical


# Wrangling columns and rows

- we'll see base R alternatives to our most common `dplyr` verbs

## Extract variables: tidyverse

```{r filename = "tidyverse"}
#| eval: false
df_tidy |> 
  select(AgeSubject)
```

```{r filename = "tidyverse"}
#| echo: false
df_tidy |> 
  select(AgeSubject) |> 
  head(10)
```

## Extract variables: base R

- the dollar sign (`$`) can be used to extract a column from a dataframe (or tibble)
- this will give us a vector, whereas `dplyr::select()` preserves the dataframe/tibble attributes of the column

```{r filename = "base R"}
#| eval: false
df_base$AgeSubject
```

```{r filename = "base R"}
#| echo: false
head(df_base$AgeSubject,18)
```

## Extract variables: base R

- or we can use `dataframe[row,column]` 
- we can use the name of a column in quotation marks

```{r filename = "base R"}
#| eval: false
# using variable name
df_base[,"AgeSubject"]
```

```{r}
#| echo: false
# using variable name
head(df_base[,"AgeSubject"],18)
```

- or we can give the index of the column, where 1 means the first column, 2 means the second column, and so on

```{r filename = "base R"}
#| eval: false
# using variable index
df_base[,1]
```

```{r}
#| echo: false
# using variable index
head(df_base[,1],18)
```

## Multiple variables: tidyverse

```{r filename = "tidyverse"}
#| eval: false
df_tidy |> 
  select(AgeSubject, RTlexdec)
```

```{r}
#| echo: false
df_tidy |> 
  select(AgeSubject, RTlexdec) |> 
  head(10)
```

## Multiple variables: baseR



:::: columns

::: {.column width="100%"}
- for this we need `c()`
:::

::: {.column width="50%"}

```{r filename = "base R"}
#| eval: false
# using variable name
df_base[,c("AgeSubject", "RTlexdec")]
```

```{r}
#| echo: false
# using variable name
df_base[,c("AgeSubject", "RTlexdec")] |> 
  head(10)
```
:::


::: {.column width="50%"}

```{r filename = "base R"}
#| eval: false
# using variable index
df_base[,c(1, 6)]
```

```{r}
#| echo: false
# using variable index
df_base[,c(1, 6)] |>  head(10)
```
:::

::::

## Extract/Filter observations: tidyverse

- with the `filter()` function from `dplyr`

```{r filename = "tidyverse"}
df_tidy |> 
  filter(RTlexdec > 600 & RTnaming < 480)
```

## Extract/Filter observations: base R

- add these conditional statements into `[,]`
  + we need to include the dataframe name with the dollar sign preceding the column name

```{r filename = "base R"}
#| eval: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,]
```

```{r}
#| echo: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,] |> 
  head(10)
```


## Select single data points: tidyverse

- use `filter()` and `select()` (which we've already done before)

```{r filename = "tidyverse"}
#| eval: false
df_tidy |> 
  filter(RTlexdec > 600, RTnaming < 480) |> 
  select(AgeSubject, RTlexdec)
```

```{r}
#| echo: false
df_tidy |> 
  filter(RTlexdec > 600, RTnaming < 480) |> 
  select(AgeSubject, RTlexdec) |> 
  head(10)
```

## Select single data points: base R

- combine row and column values in `[,]`

```{r filename = "base R"}
#| eval: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c("AgeSubject", "RTlexdec")]
```

```{r}
#| echo: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c("AgeSubject", "RTlexdec")] |> 
  head(10)
```

## Select single data points: base R

- again, you can replace the column names with the index value

```{r filename = "base R"}
#| eval: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c(1, 6)]
```

```{r}
#| echo: false
df_base[df_base$RTlexdec > 600 & df_base$RTnaming < 480,c(1, 6)] |> 
  head(10)
```

## Create new variables: tidyverse

- with the `mutate()` function from `dplyr`

```{r filename = "tidyverse"}
df_tidy |> 
  mutate(rt_lexdec_s = RTlexdec/1000)
```

## Create new variables: tidyverse

- define the new variable name (with `dataframe$variable`) and assign the value with the assignment operator `<-`

```{r filename = "base R"}
df_base$rt_lexdec_s <- df_base$RTlexdec/1000
```

## Summarise: tidyverse

- `summarise()` from `dplyr`

```{r filename = "tidyverse"}
  df_tidy |> 
  summarise(
    mean_lexdec = mean(RTlexdec),
    sd_lexdec = sd(RTlexdec),
    mean_naming = mean(RTnaming, na.rm = T),
    sd_naming = sd(RTnaming, na.rm = T)
  )
```

## Summarise: tidyverse

- we have to create new objects containing the value of each operation     + combine them into a data frame using the `data.frame()` function
- there are many alternative ways to do this, but this is the simplest if we only want to produce a few summary statistics

```{r filename = "base R"}
data.frame(mean_lexdec = mean(df_base$RTlexdec),
           sd_lexdec = sd(df_base$RTlexdec),
           mean_naming = mean(df_base$RTnaming, na.rm = T),
           sd_naming = sd(df_base$RTnaming, na.rm = T))
```


# Plots

- `ggplot2` is popular even among people who don't use the tidyverse    + this is because it has some useful features and a clean look

## Plots: base R

:::: columns

::: {.column width="100%"}

- can be useful when you want to produce simple plots to get a first look at your data
  + the most useful functions are `hist()` and `plot()`
  + note that these functions work with vectors, which is why we have to use `$` to extract the columns from the data frame
  
:::

::: {.column width="50%"}
```{r}
#| output-location: fragment

hist(df_base$RTlexdec)
```
:::


::: {.column width="50%"}
```{r}
#| output-location: fragment

plot(df_base$RTlexdec, df_base$RTnaming) 
```
:::
::::

## Plots: tidyverse

- as we've seen before:

```{r}
#| label: fig-ggplot
#| fig-cap: Histogram and scatterplot with ggplot2
#| output-location: column-fragment

library(patchwork)

# histogram
fig_hist <- 
  df_base |> 
  ggplot() +
  aes(x = RTlexdec) +
  geom_histogram()

# scatter plot
fig_scatter <-
  df_base |> 
  ggplot() +
  aes(x = RTlexdec, y = RTnaming) +
  geom_point() 
  
fig_hist + fig_scatter
```

# Learning objectoves 🏁 {.unnumbered .unlisted}

In this chapter we...

- learned what Base R is ✅
- compared Base R and Tidyverse ✅
- learn Base R equivalents of common Tidyverse verbs ✅

# Tasks

Convert the following tidyverse code to base R. We will again use the `languageR_english.csv` dataset.

## Read-in

```{r}
df_eng <- 
  read_csv(here("daten", "languageR_english.csv"))
```

## Selecting columns

```{r}
#| eval: false
df_eng |> 
  select(Word, WrittenFrequency)
```

```{r}
#| echo: false
df_eng |> 
  select(Word, WrittenFrequency) |> 
  head(10)
```

## Filtering rows

```{r}
#| eval: false
df_eng |> 
  filter(WrittenFrequency > 5.6)
```

```{r}
#| echo: false
df_eng |> 
  filter(WrittenFrequency > 5.6) |> 
  head(10)
```

## Selecting rows and columns

```{r}
#| eval: false
df_eng |> 
  filter(WrittenFrequency > 5.6 & AgeSubject == "old") |> 
  select(AgeSubject, Word, WrittenFrequency) 
```

```{r}
#| echo: false
df_eng |> 
  filter(WrittenFrequency > 5.6 & AgeSubject == "old") |> 
  select(AgeSubject, Word, WrittenFrequency) |> 
  head(10)
```

## Scatterplot

```{r}
df_eng |> 
  ggplot() +
  aes(x = WrittenFrequency, y = RTlexdec) +
  geom_point()
```

## Tidyverse versus base R

What is your impression of base R versus the tidyverse? Based on what you've seen, would you prefer one over the other, or would you prefer one in certain cases only? There's no correct answer here.


# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```


Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.9.0.463 (Desert Sunflower).

```{r}
print(sessionInfo(),locale = F)
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::











---
title: "Analysebericht: Wrangling und Datenvisualisierung"
subtitle: "Bericht 1"
author: "VORNAME NACHNAME"
institute: Humboldt-Universität zu Berlin
lang: de
date: "`r Sys.Date()`"
format:
  html:
    output-file: bericht1_DE_blatt_attempt2.html
    number-sections: true
    number-depth: 3
    toc: true
    code-overflow: wrap
    # code-tools: true
    self-contained: true
  pdf:
    output-file: bericht1_DE_attempt2.pdf
    toc: true
    papersize: a4paper
    number-sections: true
    colorlinks: true
    code-overflow: wrap
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

```{r, eval=TRUE, echo = FALSE}
# set this to TRUE if you want to provide the results/answers; then also add 'code-tools: true' to the YAML
# set this to FALSE if this is the version to be sent describing the assignment

options(scipen=999)

ANSWERS_MODE <- "instructions" # instructions only
# ANSWERS_MODE <- "output" # output only but not the code
# ANSWERS_MODE <- "answers" # code and output
```

```{r, eval = if (ANSWERS_MODE == 'instructions') TRUE else FALSE, echo = FALSE}

knitr::opts_chunk$set(eval = F, # evaluate chunks
                      echo = F, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = if (ANSWERS_MODE == 'output') TRUE else FALSE, echo = FALSE}
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = F, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = if (ANSWERS_MODE == 'answers') TRUE else FALSE, echo= if (ANSWERS_MODE == 'answers') TRUE else FALSE}
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = T, cache = F}
#| echo: false
#| results: hide
# Create references.json file based on the citations in this script
# make sure you have 'bibliography: references.json' in the YAML
# rbbt::bbt_update_bib("inclass.qmd")
```

# Beabsichtigte Lernergebnisse {.unnumbered}

- Das beabsichtigte Ziel dieses Berichts ist es, dass Sie nachweisen:

### Kenntnisse und Fähigkeiten {.unnumbered}

- die Fähigkeit, R für die Datenverarbeitung und -visualisierung zu nutzen
- die Fähigkeit, Quarto und RStudio für reproduzierbare Berichte zu verwenden

### Kommunikation {.unnumbered}

- die Fähigkeit, einen klar strukturierten und kohärenten Bericht zu erstellen

# Bewertung {.unnumbered}

Die Bewertung erfolgt auf der Grundlage der Replikation der 

- die Struktur des Dokuments (die HTML-Ausgabe)
- die Struktur und Genauigkeit des Codes (`.qmd`-Quellcode)
- die Ähnlichkeit zwischen den Originalplots und Ihren Plots

## Tipps {.unnumbered}

Einige Tipps:

- Sie können auf Deutsch oder Englisch schreiben, je nachdem, was Sie bevorzugen
- Ich empfehle Ihnen dringend, Ihr Dokument *oft* zu rendern! Auf diese Weise können Sie, wenn ein Problem auftaucht, besser einschätzen, welcher Code es verursacht.
- Wenn Sie das Gefühl haben, dass Sie etwas langsam sind, versuchen Sie, sich auf das "große Ganze" zu konzentrieren und machen Sie sich keine Gedanken über all die Details in den Plots
  + Versuchen Sie zunächst, den Plot im Allgemeinen zu erstellen, und gehen Sie dann zu den Details über
  + Ich persönlich würde zuerst versuchen, die Handlung im Großen und Ganzen zu entwerfen, und mich dann um die Details kümmern
  
*Tun Sie einfach Ihr Bestes!*

# @biondo_yesterday_2022: Verarbeitung der Kongruenz der Zeitformen der Verben {.unnumbered}

Wir werden uns zum ersten Mal mit linguistischen Daten befassen. Sie müssen die Daten nicht vollständig verstehen, um die Aufgaben zu lösen, aber vielleicht finden Sie sie hilfreich. Ihre Hauptaufgabe besteht darin, vier Diagramme zur Untersuchung der Daten zu erstellen.

Unsere Daten stammen von @biondo_yesterday_2022, die zwei Aufgaben umfassten:

1. ein Eye-Tracking-Leseexperiment
    + Die Teilnehmer lasen (spanische) Sätze mit Zeitformeln aus der Vergangenheit oder Zukunft (z. B. *ayer* 'gestern' oder *mañana* 'morgen') und Verbformen aus der Vergangenheit oder Zukunft (z. B. *compraron* 'gekauft' oder *comprarán* 'wird kaufen'). In @fig-Biondo finden Sie Beispielsätze in der Vergangenheit und in der Zukunft unter grammatikalischen ("match") und ungrammatikalischen ("mismatch") Bedingungen.
    Die + Augenbewegungen wurden aufgezeichnet, während die Teilnehmer die Sätze lasen
    + Die Haupthypothese: Wenn die Temporalphrasen nicht mit der Verbform übereinstimmen (z.B. 'gestern...kaufen' oder 'morgen...kaufen'), sollten *längere* Lesemaßnahmen in der Verbregion beobachtet werden.
    + Eine weitere Frage: Wird dieser Effekt sowohl für die Vergangenheit als auch für die Zukunft beobachtet?
2. eine Verb-'temporale Entscheidungsaufgabe'
    + In einer separaten Sitzung (d.h. nicht während des Eye-Tracking-Experiments) wurde den Teilnehmern ein isoliertes Verb präsentiert und sie wurden gebeten zu entscheiden, ob das Verb in der Vergangenheit oder in der Zukunft steht.
    + Genauigkeit und Reaktionszeit wurden aufgezeichnet.
    + Hauptforschungsfrage: Wie verhält sich die Bewertung der zeitlichen Referenz zwischen Verben in der Gegenwarts- und der Zukunftsform? Mit anderen Worten, wird das eine schneller erkannt als das andere?

```{r}
#| label: fig-Biondo
#| fig-cap: "Beispielsätze aus @biondo_yesterday_2022"
#| echo: false
#| eval: true
#| out-width: "100%"
knitr::include_graphics(here::here("media","Biondo_2021_Table3.png"))
```

## Variablen {.unnumbered}

Unsere **Messvariablen** (d. h. abhängige Variablen) sind:

- die Eye-Tracking-Lesemessung ***total reading time*** in der Verbregion (die Gesamtzeit, die beim Lesen des Satzes auf das Verb geschaut wird)
- die ***Reaktionszeiten*** (aus der zeitlichen Entscheidungsaufgabe (*temporal decision task*))
- die ***Genauigkeit*** (aus der zeitlichen Entscheidungsaufgabe (*temporal decision task*))

Unsere **Prädiktorvariablen** (d. h. unabhängige Variablen) sind:

- die ***Verbform*** (*tense*) (Vergangenheit oder Zukunft)
- ***Grammatikalität*** (ob es grammatikalisch oder ungrammatikalisch war, basierend auf dem vorangehenden Temporaladverb)

## Vorhersagen {.unnumbered}

In der Regel gehen wir davon aus, dass längere Reaktions- und/oder Lesezeiten (wie die Gesamtlesezeit) auf *Verarbeitungsschwierigkeiten*, d. h. Schwierigkeiten bei der Sprachverarbeitung, hinweisen. Die Hypothese war daher, dass längere Gesamtlesezeiten für die *Verb*-Region in ungrammatischen Sätzen vorhanden sein würden. Bei den Reaktionszeiten geht es um die Frage, ob die Zeitformen (Vergangenheit/Zukunft) bei einer Kategorisierungsaufgabe ähnliche Reaktionszeiten hervorrufen oder ob eine Zeitform länger für die Kategorisierung braucht als die andere. All diese Fragen werden wir heute mit den Daten nicht beantworten können.

# Einrichten

## YAML

- Erstellen Sie ein neues Quarto-Dokument
- Stellen Sie sicher, dass Ihre YAML enthält:
  + einen passenden Titel
  + Ihren Vor- und Nachnamen (`author`)
  + das Datum
  + das Inhaltsverzeichnis
  + unter `format: html`..., `self-contained: true` einfügen
  
- Ihr YAML sollte etwa so aussehen

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
---
title: "Summary assignment: wrangling and data viz"
subtitle: "In-class assignment 1"
author: "YOUR NAME HERE"
institute: Humboldt-Universität zu Berlin
lang: de
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    number-sections: true
    self-contained: true
---
```

## Struktur des Dokuments

- Sie werden Ihr Quarto-Skript und die HTML-Ausgabe Ihres Skripts einreichen.
- Um die Lesbarkeit des gerenderten Dokuments zu verbessern, sollten Sie das Dokument durch Überschriften und Zwischenüberschriften strukturieren.
- Verwenden Sie schriftlichen Text, wo es notwendig ist, um Fragen zu beantworten/ Prozesse zu beschreiben
- Verwenden Sie bei Bedarf Code-Bausteine

- eine gute Strategie für die Wahl einer Überschrift: Wenn dieses Dokument einen neuen Abschnitt enthält, sollten Sie auch einen neuen Abschnitt erstellen

## Pakete

- werden Sie die Pakete benötigen:
  - `tidyverse`
  - `here`
  - `patchwork`
  - `ggthemes`
  
Laden Sie sie mit dem Paket `pacman` (Funktion `p_load()`).
  
```{r}
#| eval: true
pacman::p_load(tidyverse,
               here,
               ggthemes,
               patchwork)
```

## Datenbeschreibung

Laden Sie die folgenden Daten herunter und speichern Sie sie im Ordner `daten`: `Biondo_etal_2021.csv`.

```{r}
#| eval: false
#| echo: false

df_resp <- read_csv(here("daten", "Biondo.Soilemezidi.Mancini_dataset_TDT.csv"),
                    locale = readr::locale(encoding = "latin1")) %>%
  rename(Item.num = item,
         Tense_type = tense,
         RT = rt) %>% 
  relocate(Tense_type, .before = subj) %>% 
  arrange(desc(RT))

# take total time from verb region to join with the response data (so scatterplots are possible)
df_et <- read_csv(here("daten", "Biondo.Soilemezidi.Mancini_dataset_ET.csv"),
                    locale = readr::locale(encoding = "latin1")) %>% 
  rename(subj = sj,
         Item.num = item,
         Tense_type = verb_t) %>% 
  filter(ROI == "4") %>% 
  mutate(subj = as.numeric(subj)) %>% 
  select(subj,Item.num,label,tt, gramm)

# join, based on subj and item
df_both <- df_resp %>% 
  left_join(df_et, join_by(subj,Item.num)) %>% 
  select(-label) %>% 
  rename(totalTime = tt)

write.csv(df_both, here("daten", "Biondo_etal_2021.csv"), row.names = FALSE)
```

Unsere Variablen sind in @tbl-vars beschrieben.

```{r}
#| eval: true
#| results: hide
#| echo: false

df_resp <- read_csv(here("daten", "Biondo_etal_2021.csv"),
                    locale = readr::locale(encoding = "latin1"))

# Create variable explanation
coldesc <- rep("", ncol(df_resp))
names(coldesc) <- names(df_resp)
dput(coldesc)

vars <-
  c(
    Tense_type = "Tense (past/future)",
    subj = "Participant ID",
    Item.num = "Item number",
    verb = "verb",
    acc = "accuracy (0 = wrong, 1 = correct)",
    RT = "Reaction time (milliseconds)",
    totalTime = "total reading time (milliseconds)",
    gramm = "grammatical (0 = no, 1 = yes)"
  )
```

```{r}
#| echo: false
#| eval: true
#| label: tbl-vars
#| tbl-cap: "Variable names and descriptions for dataset Biondo_etal_2021.csv"
#| 
x <- data.frame(vars)

knitr::kable(vars,
             col.names = "Description") %>% 
  kableExtra::kable_styling()
```

# Datenexploration

## Data-Wrangling

1. Um die Daten zu laden, kopieren Sie den nachstehenden Code. 

```{r}
#| eval: false
#| echo: true
df_resp <- read_csv(here("daten", "Biondo_etal_2021.csv"))
```

1. Um die Daten zu laden, kopieren Sie den nachstehenden Code. 2. Ergänzen Sie die obige Codezeile (mit einer Pipe) so, dass Sie auch:
    + Benennen Sie die Variablen um:
      + `Tense_type` als `tense`
      + `Item.num` als `item`
      + `RT` als `rt`
      + `totalTime` als `tt`
    + Verschieben Sie `tense` vor `verb`, und `gramm` nach `verb`.
    + Ordne die Zeilen nach `subj` und nach `item`

```{r}
#| eval: true
df_resp <- read_csv(here("daten", "Biondo_etal_2021.csv")) %>% 
  rename(tense = Tense_type,
         item = Item.num,
         rt = RT,
         tt = totalTime) %>% 
  relocate(tense, .before = verb) %>% 
  relocate(gramm, .after = verb) %>% 
  arrange(subj, item)
```

Hinweis: Der Kopf Ihrer Daten sollte wie folgt aussehen:

```{r}
#| eval: true
#| echo: true
head(df_resp)
```

## Erkunden die Daten

2. Untersuchen Sie den Datensatz mithilfe der entsprechenden Funktion(en). Nehmen Sie nur das in den Bericht auf, was Sie für die *beste* Zusammenfassung halten (d. h., Sie können mit der Datenauswertung herumspielen, aber nehmen Sie nur das auf, was Sie für eine prägnante und informative Zusammenfassung halten).

```{r}
summary(df_resp)
```

```{r}
glimpse(df_resp)
```

## Variablen

1. Erstellen Sie eine Aufzählung der Variablen, in der Sie angeben, um welchen *Typ* von Variable es sich jeweils handelt (z. B. numerisch, kategorisch usw.). Denken Sie daran, dass Zahlen nicht immer numerisch sind. Setzen Sie die Variablennamen kursiv.

- *Variablenname*: Variablentyp
- ...

2. Untersuchen Sie das Dichteplot (@fig-density-histo A) und das Histogramm (@fig-density-histo B) unten. Beobachten Sie, was auf der x-Achse aufgetragen wird, und beantworten Sie die folgenden Fragen:
    b. Was zeigen die beiden Diagramme (benenne, was entlang der x- und y-Achse aufgetragen ist; wofür stehen die verschiedenen Farben?).
    a. Zeigen die beiden Diagramme die gleichen Daten?
    d. Welches `geom` wird benötigt, um ein Dichte-Diagramm zu erstellen? Ein Histogramm? (e.g., `geom_barplot()` wird zur Erstellung von Balkendiagrammen verwendet)

```{r}
#| eval: true
fig_density <- df_resp %>% 
  ggplot(aes(x = rt, fill = as_factor(acc), colour = as_factor(acc))) +
  geom_density(alpha = 0.4) +
  labs(title = "Reaction times per accuracy level",
       x = "Reaction times (ms)",
       y = "Density",
       fill = "Accuracy",
       colour = "Accuracy") +
  theme_minimal()
```

```{r}
#| eval: true
fig_histogram <- df_resp %>% 
  ggplot(aes(x = rt, fill = as_factor(acc), colour = as_factor(acc))) +
  facet_grid(.~as_factor(acc)) +
  geom_histogram(alpha = 0.4) +
  labs(title = "Reaction times per accuracy level",
       x = "Reaction times (ms)",
       y = "Count",
       fill = "Accuracy",
       colour = "Accuracy") +
  theme_bw()
```

```{r}
#| eval: true
#| label: fig-density-histo
#| fig-cap: "Dichte- und Histogrammdiagramme"
#| fig-width: 6
#| out-width: "80%"
#| fig-asp: 0.8

((plot_spacer() + fig_density + plot_spacer() + plot_layout(nrow = 1, widths = c(.15,.7,.15))) /
   fig_histogram) +
  plot_layout(nrow = 2) +
  plot_annotation(tag_levels = "A")
```

3. Beschreiben Sie die Verteilung der Reaktionszeiten auf der Grundlage dieser Diagramme. Wie hoch sind die ungefähren Reaktionszeiten der richtigen Antworten? Für ungenaue Antworten? Gibt es mehr genaue oder ungenaue Antworten?

# Datenvisualisierung

Replizieren *und beschreiben* Sie die folgenden Diagramme.

## Balkenplot

1. Reproduzieren Sie @fig-barplot (Genauigkeit durch Anspannung). Wir haben nicht besprochen, wie man die Balken nebeneinander druckt. ***Tipp***: Dies nennt man einen *gruppierten* Balkenplot (DE: grouped barplot). Möglicherweise müssen Sie "grouped barplot ggplot2" googeln, um herauszufinden, wie man einen solchen Barplot erstellt.

```{r}
#| eval: true
#| label: fig-barplot
#| fig-cap: "Balkenplot"
#| fig-width: 6
#| out-width: "80%"
#| fig-asp: 0.618

df_resp %>% 
  ggplot(aes(x = as_factor(tense), fill = as_factor(acc))) +
  geom_bar(position="dodge") +
  labs(title = "Accuracy by tense",
       x = "Tense",
       y = "Count",
       fill = "Accuracy",
       colour = "Accuracy") +
    scale_fill_colorblind() +
  theme_bw() 
```

Beschreiben Sie die Handlung, z. B. ob die Antworten in den einzelnen Zeitformen genauer oder ungenauer waren? Waren sie zwischen den Zeitformen ähnlich?

## Punktwolke

2. Reproduzieren Sie @fig-scatter und beantworten Sie diese Frage: Gibt es einen Trend zwischen Reaktionszeiten und Gesamtlesezeiten? Beschreiben Sie, was Sie sehen.

```{r}
#| eval: true
#| label: fig-scatter
#| fig-cap: "Punktwolke"
#| fig-width: 6
#| out-width: "80%"
#| fig-asp: 0.618


df_resp %>%
  ggplot(aes(x = rt, y = tt)) +
  geom_point(
    position = position_jitterdodge(.5),
    alpha = .5,
    aes(colour = as_factor(gramm), shape = as_factor(gramm))
  ) +
  labs(
    title = "Total reading time (verb region) by reaction time ",
    x = "Reaction time (ms)",
    y = "Total reading time (ms)",
    shape = "Grammaticality",
    colour = "Grammaticality"
  ) +
  scale_fill_colorblind() +
  geom_smooth(method = "lm") +
  theme_bw() 
```

# Interpretieren eines neuen Diagrammtyps

Eine wichtige Fähigkeit besteht darin, zu lernen, wie man Daten in einer Darstellung interpretiert. In @fig-boxplot sehen Sie einen Boxplot (auch Box-and-Whisker-Plot genannt), den wir bisher noch nicht gesehen haben. Beantworten Sie die folgenden Fragen zu diesem Diagramm:

1. Was ist auf der x-Achse aufgetragen? Handelt es sich um einen numerischen oder kategorialen Faktor?
2. Was ist auf der y-Achse eingezeichnet? Handelt es sich um einen numerischen oder kategorialen Faktor?
3. Kannst du den Namen des `geom` erraten, das einen Boxplot erzeugt? Denke über den Namen eines `geom` für ein Balkendiagramm nach, zum Beispiel.
4. Was glaubst du, was die Punkte im Diagramm darstellen? (Es ist okay, sich zu irren.)
5. Was glaubst du, stellt das Kästchen auf dem Diagramm dar? (Es ist in Ordnung, sich zu irren.)
5. Was glaubst du, stellt die dicke Linie in der Mitte des Kästchens dar? (Es ist in Ordnung, sich zu irren.)

```{r}
#| eval: true
#| label: fig-boxplot
#| fig-cap: "Boxplot"
#| fig-width: 6
#| out-width: "80%"
#| fig-asp: 0.618

df_resp %>% 
  ggplot(aes(x = as_factor(gramm), y = tt,
             colour = as_factor(gramm))) +
  facet_grid(.~as_factor(tense)) +
  geom_boxplot() +
  labs(title = "Total reading time (verb region) by tense and grammaticality",
       y = "Total reading time (ms)",
       x = "Grammaticality") +
    scale_fill_colorblind() +
  theme_bw() +
  theme(legend.position = "none") 
```

# Session Info einbeziehen

Am Ende Ihres Berichts:

1. Erstellen Sie einen neuen Abschnitt (`# Session Info`)
2. Fügen Sie den folgenden Text als Inline-Text ein: 

> Hergestellt mit `` `r knitr::inline_expr("R.version.string")` `` (`` `r knitr::inline_expr("R.version$nickname")` ``).

3. Fügen Sie das Folgende in einen Codeabschnitt ein:

```{r}
#| eval: false
#| echo: true
sessionInfo()
```

Wenn Sie nun Ihr Dokument rendern, sollte eine Zusammenfassung der geladenen Pakete und ihrer Versionen angezeigt werden.

# Bericht einreichen

Wenn Sie fertig sind, laden Sie Ihr `.qmd`-Skript *und* die gerenderte Ausgabe im HTML-Format in Moodle hoch.

## Früher fertig?

Wenn Sie zu früh fertig waren oder die Aufgaben zu einfach fanden, versuchen Sie, die obigen Dichte- und Histogrammdiagramme zu reproduzieren. ***Tipp***: Für das Histogramm müssen Sie googeln, um herauszufinden, wie Sie die Darstellung in zwei Boxen aufteilen können (die Boxen werden `facet` genannt)

# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```

Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.3.0.386 (Cherry Blossom).

```{r}
#| eval: true
sessionInfo()
```


# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::

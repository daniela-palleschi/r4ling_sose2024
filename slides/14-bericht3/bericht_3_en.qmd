---
title: "Bericht 3"
subtitle: "Konsolidierung der neuen Kenntnisse"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 15 - Bericht 3"
lang: de
date: "02/05/2024"
date-format: "ddd [den] DD.MM.YYYY"
date-modified: last-modified
## shift-heading-level-by: +1
code-tools: false
eval: false
echo: false
message: false
warning: false
---

# Bericht 3 {.unnumbered}

The purpose of this report is to consolidate what we have learned over the last few weeks with what we have learned previously. You will load a dataset from a published paper that investigates voiced-onset times [@sonderegger_regression_2023] that is available on Moodle. If you are not enrolled in this course on Moodle, the dataset is also freely available on the Open Science Framework at [https://osf.io/cmh3p](https://osf.io/cmh3p).

You can create your own Quarto script from scratch or use a blank script I created with the questions and corresponding headings. You can find this script on Moodle or online [here](https://github.com/daniela-palleschi/r4ling/blob/689c46b15a883d0fb2d001ea50d97fa101e23d62/slides/11-bericht2/empty%20script/student_bericht2.qmd).


# Set-up

This report is shared with you as an incomplete Quarto script. Your task is to follow the instructions to complete the script. The instructions are preceded by a `>`, in order to differentiate them from your own text that you will include to describe your data. Please keep the instructions in the script so that it is clear what each task is trying to achieve. You may delete this paragraph if you wise.

## Render

Before continuing, check that you can render the script as PDF. It should run even though below there are incomplete code chunks, because the YAML includes `eval: false`.

## YAML

Ändern Sie die YAML so, dass:

  - `eval: true`
  - `Autor: "IHR NAME"`

Nun können Sie das Dokument erst rendern, wenn alle Code-Bausteine darunter fertiggestellt sind, weil darunter unvollständige Code-Bausteine sind und Sie `eval: true` gesetzt haben.


## Packages

Load in the packages `tidyverse`, `gghalves`, `patchwork`, and `here`.

```{r}
#| echo: false
#| eval: true
pacman::p_load(
  tidyverse,
  gghalves,
  here,
  patchwork
)
```

## Load data

Below is a code chunk that loads in a data set from @sonderegger_medium-term_2017 and discussed in @sonderegger_regression_2023. 

```{r filename = "Copy and run this code"}
#| eval: true
#| echo: true
df_vot <-
  read_csv(here::here("daten", "vot_rmld_2023.csv")) 
```

The dataset contains voice onset times in milliseconds (VOTs; `vot`)  for word-initial stop consonants (`phone`: p/t/k/b/d/g) in speech from native English speaker contestants in a reality television show, Big Brother UK (2008, Season 9). Importantly, "[voice onset time] is the primary acoustic cue in English signaling whether a stop is phonologically [voiced] (b/d/g) or [voiceless] (b/d/g)" [@sonderegger_regression_2023, p. 98]. We will be looking at differences in VOT as a function of voicing and place of articulation (`place`: alveolar/labial/velar) across a subset of contestants.

## Data exploration

Explore the dataset however you like to get familiar with it. You do not need to show your work for this task, but if you do please keep in mind that if you use code in the script that prints the data (e.g., running simply `df_vot`), it will produce all the rows (n = `r nrow(df_vot)`) when you render the document, adding many pages to your rendered document. For this reason, try using `head()` to print only the first 6 rows (first discussed in [Chatper 4](https://daniela-palleschi.github.io/r4ling/mats/04-wrangling_1.html#lexdec)), or simply opening the dataset viewer by double clicking on its name in the 'Environment' pane. 

# Base R

In this section you will interpret and write code in base R and/or the tidyverse.

## Filter

Using base R, filter the data to only include the speakers `rex`, `michael`, `sara`, and `lisa.` Tip: you will want to use `[,]`, where rows are defined on the left and columns on the right. We want all columns, so you don't need to include anything to the right of the comma.

```{r filename = "Complete this code"}
#| eval: false
#| echo: true
df_vot <-
  ...
```

```{r}
#| echo: false
#| eval: true
df_vot <- df_vot[df_vot$speaker %in% c("sara", "rex", "lisa", "michael"),]
```

## Code description

Describe in words what the following base R code achieves:

```{r}
#| echo: true
#| eval: false
df_vot[df_vot$vot > 75 & df_vot$voicing == "voiced", 1]
```

## base R-tidyverse 'translation'

Now write the same code in tidyverse and print the result.

```{r filename = "Complete this code"}
#| eval: false
#| echo: true
df_vot |> 
  ...
```


```{r}
#| eval: false
#| echo: false
df_vot |> 
  filter(vot > 75,
         voicing == "voiced") |> 
  select(1)
```

## base R summary

Using base R, create a summary called `sum_vot` which contains the mean and standard deviation voice onset times, and number of observations (using `length()`) of the whole dataset.

```{r filename = "Complete this code"}
#| eval: false
#| echo: true
sum_vot <-
  ...
```

```{r}
#| echo: false
#| eval: true
sum_vot <-
  data.frame(
    mean_vot = mean(df_vot$vot),
    sd_vot = sd(df_vot$vot),
    n = length(df_vot$vot)
  )
```

## Tidyverse summary

Now, using the tidyverse, do the same but produce these values by speaker, phone, place, and voicing. Call it `sum_speaker`.

```{r filename = "Complete this code"}
#| eval: false
#| echo: true
sum_speaker <-
  ...
```

```{r}
#| echo: false
#| eval: true
sum_speaker <-
  df_vot |> 
  summarise(
    mean = mean(vot),
    sd = sd(vot),
    n = length(vot),
    .by = c(speaker, phone, place, voicing)
  )
```

# Plots

For these tasks you will produce two plots using functions and arguments covered in the Data Visualisation 4 session.

## Multi-part plot

Produce a multi-part plot per speaker (x-axis) voice-onset times (y-axis), which contains a scatter plot, boxplot, and dodged histogram, with facets per participant arranged in a single row (Hint: `facet_wrap()` has an argument `nrow = ` that can define the number of rows). See [Figure in Section 13.1.4 from the web-book](https://daniela-palleschi.github.io/r4ling/mats/13-dataviz_4.html#kombiniert-alle-drei) for inspiration. Call this plot `fig_vot`.

```{r filename = "Complete this code"}
#| eval: false
#| echo: true
fig_vot <-
  ...
```

```{r}
#| echo: false
#| eval: true
fig_vot <-
  df_vot %>% 
  ggplot() +
  aes(x = voicing, y = vot, colour = voicing) +
  geom_point(position = position_jitter(0.2),
             alpha = 0.2) +
  geom_half_violin() +
  facet_wrap(~speaker, nrow = 1) +
  geom_boxplot(
    colour = "black",
    outlier.shape = NA,
               width = .3, 
               position = position_nudge(x=0.2)) +
  theme_bw() +
  labs(
    title = "Distribution of VOTs",
    y = "VOT (ms)",
    x = "Voicing",
    colour = "Voicing",
    shape = "Voicing",
    linetype = "Voicing"
  ) +
  theme(
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold"),
    text = element_text(size = 14)
  )
```

## Errorbar plot

Produce an errorbar plot of the by-speaker summary, with voicing on the x-axis, colour, shape, and group by place of articulation, and a facet per participant, arranged in a single row (Hint: `facet_wrap()` has an argument `nrow = ` that can define the number of rows). Include `geom_line()`, with the local aesthetic `linetype` by place. Make sure you use `position_dodge()` to make sure the errorbars do not overlap. Once you have created the plot, add labels and theme customisations to match @fig-errorbar as best you can. Call this plot `fig_vot_error`.

```{r filename = "Complete this code"}
#| eval: false
#| echo: true
fig_vot_error <-
  ...
```

```{r}
#| eval: true
fig_vot_error <-
  sum_speaker |> 
  ggplot() +
  aes(x = voicing, y = mean, colour = place,
      shape = place, group = place) +
  facet_wrap(~speaker, nrow = 1) +
  geom_point(position = position_dodge(0.2),
             size = 2) +
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                width = 0.2,
                position = position_dodge(0.2)) +
  geom_line(aes(group = place, linetype = place),
            position = position_dodge(0.2)) +
  theme_bw() +
  labs(
    title = "Mean VOTs (w/ SD)",
    y = "Mean VOT (ms)",
    x = "Voicing",
    colour = "Place of Articulation",
    shape = "Place of Articulation",
    linetype = "Place of Articulation"
  ) +
  theme(
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold"),
    text = element_text(size = 14)
  )
```


## Plots drucken

Drucken Sie Ihre Diagramme übereinander mit dem Paket `patchwork`. Fügen Sie die Beschriftungen `A` und `B` ein (wir haben gesehen, wie man das zweimal macht: in [Kapitel 10](https://daniela-palleschi.github.io/r4ling/mats/10-dataviz_3.html#patchwork) und [Kapitel 13](https://daniela-palleschi.github.io/r4ling/mats/10-dataviz_3.html#patchwork)). Sie sollten etwa so aussehen wie @fig-error A und B.

```{r}
#| echo: false
#| eval: true
#| label: fig-error
#| fig-cap: Reproduce this plot.
#| fig-asp: .8
#| fig-width: 10

fig_vot/fig_vot_error +
  plot_annotation(tag_levels = "A")
```


## Plot interpretation

Interpret your plots. Consider the differences between speakers, voicing, and of place of articulation (and if any of these differences varied as a function of another variable, e.g., are the differences of voicing and place of articulation the same for all speakers?).

# Reflection

Reflect on your journey through this course. What did you find particularly interesting? What was difficult? What do you still struggle with? Do you see yourself applying what you've learned in future work? How might the course be improved moving forward?

# References


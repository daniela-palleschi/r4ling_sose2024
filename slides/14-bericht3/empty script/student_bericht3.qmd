---
title: "Bericht 3"
subtitle: "Konsolidierung der neuen Kenntnisse"
author: "Vorname Nachname"
institute: Humboldt-Universität zu Berlin
lang: de
date: "`r Sys.Date()`"
number-sections: true
embed-resources: true
toc: true
echo: true
eval: false
output:
  pdf: default
  html: default
---

> Der Zweck dieses Berichts ist es, das, was wir in den letzten Wochen gelernt haben, mit dem zu konsolidieren, was wir zuvor gelernt haben. Sie werden einen Datensatz aus einer veröffentlichten Arbeit laden, die sich mit der Untersuchung von Stimmbruchzeiten befasst [@sonderegger_medium-term_2017; @sonderegger_regression_2023] und die auf Moodle verfügbar ist. Wenn Sie nicht in diesem Kurs auf Moodle eingeschrieben sind, ist der Datensatz auch frei auf dem Open Science Framework unter [https://osf.io/cmh3p](https://osf.io/cmh3p) verfügbar.
>
> Sie können Ihr eigenes Quarto-Skript von Grund auf erstellen oder ein leeres Skript verwenden, das ich mit den Fragen und den entsprechenden Überschriften erstellt habe. Sie können dieses Skript auf Moodle oder online [hier](https://github.com/daniela-palleschi/r4ling/blob/main/slides/14-bericht3/empty%20script/student_bericht3.qmd) finden.

# Einrichten

> Dieser Bericht wird Ihnen als unvollständiges Quarto-Skript zur Verfügung gestellt. Ihre Aufgabe ist es, die Anweisungen zu befolgen, um das Skript zu vervollständigen. Sie finden das Skript auf Moodle, oder [hier](https://github.com/daniela-palleschi/r4ling/blob/689c46b15a883d0fb2d001ea50d97fa101e23d62/slides/11-bericht3/empty%20script/student_bericht3.qmd). 
>
> Den Anweisungen ist ein `>` vorangestellt, um sie von Ihrem eigenen Text zu unterscheiden, den Sie zur Beschreibung Ihrer Daten einfügen werden. Bitte halten Sie die Anweisungen im Skript so, dass es klar ist, was jede Aufgabe zu erreichen versucht. Sie können diesen Absatz löschen, wenn Sie möchten.

## Rendern

> Bevor Sie fortfahren, überprüfen Sie, ob Sie das Skript als PDF rendern können. Es sollte laufen, auch wenn unten unvollständige Codeabschnitte stehen, da die YAML `eval: false` enthält.

## YAML

> Ändern Sie die YAML so, dass:
>
>  - `eval: true`
>  - `Autor: "IHR NAME"`
>
> Nun können Sie das Dokument erst rendern, wenn alle Code-Bausteine darunter fertiggestellt sind, weil darunter unvollständige Code-Bausteine sind und Sie `eval: true` gesetzt haben.

## Pakete

> Laden Sie die Pakete `tidyverse`, `gghalves`, `patchwork`, und `here` ein.

## Daten laden

> Nachfolgend ein Codeabschnitt, der einen Datensatz aus @sonderegger_medium-term_2017 lädt und in @sonderegger_regression_2023 besprochen wird. **Wichtig:** Sie müssen die Daten bereits heruntergeladen haben, entweder von Moodle oder vom [Open Science Framework](https://osf.io/cmh3p), und sie in Ihrem 'daten'-Ordner gespeichert haben.

```{r}
df_vot <-
  read_csv(here::here("daten", "vot_rmld_2023.csv")) 
```

> Der Datensatz enthält Stimmeinsatzzeiten in Millisekunden (VOTs; `vot`) für wortanfängliche Stoppkonsonanten (`phone`: p/t/k/b/d/g) in der Rede von englischen Muttersprachlern, die an der Reality-TV-Show Big Brother UK (2008, Staffel 9) teilnahmen. Wichtig ist, dass "*[der Zeitpunkt des Stimmeinsatzes] im Englischen der primäre akustische Hinweis darauf ist, ob ein Stop phonologisch [stimmhaft] (b/d/g) oder [stimmlos] (b/d/g) ist*" [@sonderegger_regression_2023, S. 98]. Wir werden die Unterschiede in der VOT als Funktion der Stimmhaftigkeit und des Artikulationsortes (`place`: alveolar/labial/velar) in einer Untergruppe von Teilnehmern untersuchen.

## Datenuntersuchung

> Machen Sie sich mit dem Datensatz vertraut, wie Sie möchten. Sie müssen Ihre Arbeit für diese Aufgabe nicht zeigen, aber wenn Sie es tun, bedenken Sie bitte, dass, wenn Sie Code im Skript verwenden, der die Daten ausgibt (z.B. einfach `df_vot`), er alle Zeilen (n = `25154`) erzeugt, wenn Sie das Dokument rendern, was viele Seiten zu Ihrem gerenderten Dokument hinzufügt. Versuchen Sie deshalb, mit `head()` nur die ersten 6 Zeilen auszudrucken (zuerst in [Chatper 4](https://daniela-palleschi.github.io/r4ling/mats/04-wrangling_1.html#lexdec) besprochen), oder öffnen Sie einfach den Datensatzbetrachter durch Doppelklick auf seinen Namen im Fenster 'Umgebung' ('Environment'). 

# Base R

> In diesem Abschnitt werden Sie Code in Base R und/oder Tidyverse interpretieren und schreiben.

## Filter

> Filtern Sie mit base R die Daten so, dass nur die Sprecher `rex`, `michael`, `sara` und `lisa` enthalten sind. Tipp: Verwenden Sie `[,]`, wobei Zeilen links und Spalten rechts definiert sind. Wir wollen alle Spalten, also müssen Sie nichts rechts vom Komma einfügen.

```{r}
df_vot <-
  
```

## Codebeschreibung

> Beschreiben Sie in Worten, was der folgende R-Basiscode bewirkt:

```{r}
df_vot[df_vot$vot > 75 & df_vot$voicing == "voiced", 1]
```

In diesem Code-Chunk (schreiben Sie Ihre Antwort hier)...

## base R-tidyverse 'Übersetzung'

> Schreiben Sie nun den gleichen Code in tidyverse und drucken Sie das Ergebnis aus.

```{r}
df_vot |> 
```


## base R Zusammenfassung

> Erstellen Sie mit base R eine Zusammenfassung mit dem Namen `sum_vot`, die den Mittelwert und die Standardabweichung der Stimmausgangszeiten sowie die Anzahl der Beobachtungen (mit `length()`) des gesamten Datensatzes enthält.

```{r}
sum_vot <-
```

## Zusammenfassen mit tidyverse

> Machen Sie nun dasselbe mit tidyverse, aber produzieren Sie diese Werte nach Sprecher, Telefon, Ort und Stimmlage. Nennen Sie es `sum_speaker`.

```{r}
sum_speaker <-
```

# Plots

> Für diese Aufgaben werden Sie zwei Diagramme erstellen, indem Sie Funktionen und Argumente verwenden, die in der Sitzung Datenvisualisierung 4 behandelt wurden.

## Mehrteilige Darstellung

> Erstellen Sie einen mehrteiligen Plot pro Sprecher (x-Achse) und Sprechzeit (y-Achse), der einen Scatter Plot, Boxplot und ein Dodged Histogram enthält, wobei die Facetten pro Teilnehmer in einer einzigen Zeile angeordnet sind (Hinweis: `facet_wrap()` hat ein Argument `nrow = `, mit dem die Anzahl der Zeilen definiert werden kann). Siehe [Abbildung in Abschnitt 13.1.4 aus dem Web-Book](https://daniela-palleschi.github.io/r4ling/mats/13-dataviz_4.html#kombiniert-alle-drei) zur Inspiration. Nennen Sie diese Darstellung `fig_vot`.

```{r}
fig_vot <-
```

## Fehlerbalken-Diagramm

> Erzeugen Sie ein Fehlerdiagramm der Zusammenfassung nach Sprechern, mit Intonation auf der x-Achse, Farbe, Form und Gruppe nach Ort der Artikulation und einer Facette pro Teilnehmer, angeordnet in einer einzigen Zeile (Hinweis: `facet_wrap()` hat ein Argument `nrow = `, das die Anzahl der Zeilen festlegen kann). Fügen Sie `geom_line()` ein, mit der lokalen Ästhetik `linetype` an Stelle. Stellen Sie sicher, dass Sie `position_dodge()` verwenden, um sicherzustellen, dass sich die Fehlerbalken nicht überlappen. Sobald Sie die Darstellung erstellt haben, fügen Sie Beschriftungen und Themenanpassungen hinzu, die so gut wie möglich zu @fig-errorbar passen. Nennen Sie diese Darstellung `fig_vot_error`.

```{r}
fig_vot_error <-
```

## Plots drucken

> Drucken Sie Ihre Diagramme übereinander mit dem Paket `patchwork`. Fügen Sie die Beschriftungen `A` und `B` ein (wir haben gesehen, wie man das zweimal macht: in [Kapitel 10](https://daniela-palleschi.github.io/r4ling/mats/10-dataviz_3.html#patchwork) und [Kapitel 13](https://daniela-palleschi.github.io/r4ling/mats/10-dataviz_3.html#patchwork)). Sie sollten etwa so aussehen wie @fig-error A und B, die Sie auf der Website des Kurses oder im Anleitungsskript finden können.

## Interpretation des Plots

> Interpretieren Sie Ihre Diagramme. Betrachten Sie die Unterschiede zwischen den Sprechern, die Intonation und den Ort der Artikulation (und ob einer dieser Unterschiede in Abhängigkeit von einer anderen Variable variiert, z. B. ob die Unterschiede bei Intonation und Ort der Artikulation für alle Sprecher gleich sind).

# Reflexion

> Reflektieren Sie über Ihre Reise durch diesen Kurs. Was haben Sie besonders interessant gefunden? Was war schwierig? Womit tun Sie sich noch schwer? Könnten Sie sich vorstellen, das Gelernte in Zukunft bei Ihrer Arbeit anzuwenden? Wie könnte der Kurs in Zukunft verbessert werden?

# Referenzen


---
title: "Data Tidying"
subtitle: "Data Tidying"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Week 9 - Data Tidying" 
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    output-file: wrangling2_blatt_EN.html
    include-after-body: custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
  revealjs: 
    output-file: wrangling2_folien_EN.html
    include-after-body: custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    number-depth: 1
    # toc: true
    # toc-depth: 1
    # toc-title: 'Überblick'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
  pdf:
    output-file: wrangling2_EN.pdf
    toc: true
    number-sections: true
    colorlinks: true
    code-overflow: wrap
bibliography: ../../references.bib
csl: ../../apa.csl
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = T, cache = F}
#| echo: false
# Create references.json file based on the citations in this script
# make sure you have 'bibliography: references.json' in the YAML
# rbbt::bbt_update_bib("_wrangling2_EN.qmd")
```

# Learning objectives {.unnumbered}

Today we will learn...

- about wide versus long data
- how to make wide data longer
- how to make long data wider

## Resources {.unnumbered}

The suggested resources for this topic are

- [Chapter 6 (Data tidying)](https://r4ds.hadley.nz/data-tidy) in @wickham_r_2023
- [Chapter 8 (Data tidying)](https://psyteachr.github.io/ads-v2/08-tidy.html) in @nordmann_applied_2022

# Set-up

## Packages

```{r}
pacman::p_load(tidyverse,
               here,
               janitor)
```

## Data

- we'll use the `languageR_english.csv` dataset (in `daten` folder)

```{r}
df_eng <- read_csv(here("daten", "languageR_english.csv")) |> 
  clean_names() |> #<1>
  arrange(word) |> #<2>
  rename( #<3>
    rt_lexdec = r_tlexdec, #<4>
    rt_naming = r_tnaming #<5>
  ) |> 
  select(age_subject, word, word_category, rt_lexdec, rt_naming) #<6>
```

1. Clean (i.e., *tidy*) variable names (from `janitor`)
2. Arrange rows by `word` in assending order (A-Z)
3. Rename variables...
4. `r_tlexdec` to `rt_lexdec`
5. `r_tlexdec` to `rt_lexdec`
6. keep only the columns named

# Tidy workflow

::: {.content-visible when-format="revealjs"}
- @fig-workflow-revealjs shows an overview of the typical data science process
  + import our data, tidy it, then work through a cycle of transforming, visualising, and modelling before finally communicating your findings
- today we'll learn about the tidying step

```{r}
#| echo: false
#| out-width: "70%"
#| fig-align: center
#| label: fig-workflow-revealjs
#| fig-cap: "A model of the data science process from @wickham_r_2023 [(all rights reserved)](https://r4ds.hadley.nz/intro.html)"
magick::image_negate(magick::image_read(here::here("media/Wickham_tidyworkflow.png")))
```
:::

::: {.content-hidden when-format="revealjs"}
- @fig-workflow shows an overview of the typical data science process
  + import our data, tidy it, then work through a cycle of transforming, visualising, and modelling before finally communicating your findings

```{r}
#| echo: false
#| out-height: "100%"
#| label: fig-workflow
#| fig-align: center
#| fig-cap: "[Image source:](https://r4ds.hadley.nz/intro.html) @wickham_r_2023 (all rights reserved)"
magick::image_read(here::here("media/Wickham_tidyworkflow.png"))
```
:::

::: {.content-visible when-format="revealjs"}
## {.unlisted .unnumbered}
:::

- so far we've learned how to 
  + import our data (`readr::read_csv`)
  + transform data (`dplyr` package)
  + visualise data (`ggplot` package) 
  + communicate our findings with dynamic reports (Quarto)

- but we've only seen tidy data so far
  + so we haven't needed to perform the 'tidy' step (`tidyr` package)

# Tidy data

- the same data can be representing multiple ways
- we're going to look at 3 tables that present the exact same data in different formats
- the tables show the same values of four variables: 
  + `country`
  + `year`
  + `population`
  + and number of tuberculosis `cases`

- Each dataset organises the values differently
- As we look at each table, take a moment to consider how easy it is to understand the values and relationships between the variables

::: {.content-visible when-format="revealjs"}
##
:::: columns 
::: {.column width="33%"}
```{r}
#| output-location: fragment
#| echo: false
#| label: tbl-1-revealjs
#| tbl-cap: Tabelle 1
df_tb <- read_csv(here("daten", "table1.csv"))
df_tb %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling(
    font_size = 25
  )
```
:::

::: {.column width="33%"}
```{r}
#| output-location: fragment
#| echo: false
#| label: tbl-2-revealjs
#| tbl-cap: Tabelle 2
df_tb %>%
  pivot_longer(
    cols = c(cases, population),
    names_to = "type",
    values_to = "count"
  ) %>%
  knitr::kable() %>% 
  kableExtra::kable_styling(
    font_size = 24
  )
```
:::

::: {.column width="33%"}
```{r}
#| echo: false
#| output-location: fragment
#| tbl-cap: Tabelle 3
#| label: tbl-3-revealjs
df_tb %>%
  # group_by(country,year) %>% 
  mutate(rate = paste0(cases,"/",population)) %>% 
  select(-cases,-population) %>%
  knitr::kable() %>% 
  kableExtra::kable_styling(
    font_size = 25
  )
```
:::

:::: 

:::

::: {.content-hidden when-format="revealjs"}

```{r}
#| output-location: fragment
#| echo: false
#| tbl-cap: Tabelle 1
#| label: tbl-1
df_tb %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling(
    font_size = 20
  )
```

```{r}
#| output-location: fragment
#| echo: false
#| tbl-cap: Tabelle 2
#| label: tbl-2
df_tb %>%
  pivot_longer(
    cols = c(cases, population),
    names_to = "type",
    values_to = "count"
  ) %>%
  knitr::kable() %>% 
  kableExtra::kable_styling(
    font_size = 20
  )
```

```{r}
#| echo: false
#| output-location: fragment
#| tbl-cap: Tabelle 3
#| label: tbl-3
df_tb %>%
  # group_by(country,year) %>% 
  mutate(rate = paste0(cases,"/",population)) %>% 
  select(-cases,-population) %>%
  knitr::kable() %>% 
  kableExtra::kable_styling(
    font_size = 20,
    full_width = F
  )
```

:::

## Rules for tidy data

::: {.content-visible when-format="revealjs"}
- You likely found @tbl-1-revealjs easiest to read
  + it follows the three rules for tidy data (visualised in @fig-tidy):
  
:::

::: {.content-hidden when-format="revealjs"}
- You likely found @tbl-1 easiest to read
  + it follows the three rules for tidy data (visualised in @fig-tidy):
:::

1.  Each variable is a column, each column is a variable
2.  Each observation is a row, each row is an observation
3.  Each value is a cell, each cell is a single value

```{r}
#| echo: false
#| out-width: "90%"
#| label: fig-tidy
#| fig-align: center
#| fig-cap: "[Image source:](https://r4ds.hadley.nz/data-tidy.html) @wickham_r_2023 (all rights reserved)"
magick::image_read(here::here("media/Wickham_tidydata.png"))
```

## Why tidy data?

> "**Happy families** are all alike; every **unhappy family** is unhappy in its own way." 
>
--- Leo Tolstoy

> "**Tidy datasets** are all alike, but every **untidy dataset** is untidy in its own way."
>
--- Hadley Wickham

::: {.content-visible when-format="revealjs"}
##
:::

There are two main advantages to working with tidy data:

1. working with a consistent data structure allows us to adopt conventions
    + tidy data is the generally agreed upon data structure
    + conventions/tools are built on the assumption of this structure
2. `R`'s vectorised nature can shine
    + most built-in R funtions work with *vector values* (and columns are essentially vectors)
    + all packages in the `tidyverse` are designed to work with tidy data (e.g., `ggplot2` and `dplyr`)

::: {.content-visible when-format="revealjs"}
##
:::

::: callout-tip
### [Aufgabe @exm-tidy]: Tidy data

::: {#exm-tidy .custom}
::: nonincremental
1.  Go back to Tables 1-3. For each table, describe what each observation and each column represents.
2.  Sketch out the process you’d use to calculate the rate for @tbl-1-revealjs. You will need just one verb that:
    + creates a new variable (call it `rate`) that contains:
      + the number of TB `cases` per country per year, divided by
      + the matching `population` per country per year, 
      + multiply by `10000`
    + hint: Which `dplyr` verb creates new variables? (Look back at @sec-data-transform.)
3.  Look at tables 2 and 3. Would it have been as easy to calculate `rate` with these data structures?

:::
:::
:::

# Data tidying

- transforming wide data to long data and long data to wide data (among other steps)
  + outcome: tidy data (usually)

## Data tidying with the `tidyverse`

- `tidyr` package (from the `tidyverse`) has two useful functions for transposing our data: 

  - `pivot_longer()`: make wide data longer
  - `pivot_wider()`: make long data wider

::: {.content-hidden when-format="pdf"}
```{r echo = F, fig.align = "center", out.width="100%"}
#| fig-cap-location: bottom
#| label: fig-pivot-html
#| fig-cap: die berühmteste Verwendung des Wortes Pivot (zumindest für Millenials) ([Friends](https://www.youtube.com/watch?v=8w3wmQAMoxQ))
magick::image_read(here::here("media/pivot_friends.jpeg"))
```
:::

::: {.content-visible when-format="pdf"}
```{r echo = F, fig.align = "center", out.width="50%"}
#| fig-cap-location: bottom
#| label: fig-pivot-pdf
#| fig-cap: die berühmteste Verwendung des Wortes Pivot (zumindest für Millenials)
magick::image_read(here::here("media/pivot_friends.jpeg"))
```
:::

## Wide versus long data

- we often need to convert between wide and long data formats to do different types of summaries or visualisation

- wide data:  all of the observations about one thing are in the same row
  + is *usually* not tidy
- long data: each observation is on a separate row
  + is *usually* tidy

- let's start with the most typical case: turning wide data into long data
  
# `pivot_longer()`

- in the `languageR_english.csv` dataset (`df_eng`)
  - we have 4568 observations (rows)
  - we have 7 variables (columns)
  - the column `age_subject` tells us whether an observation is from a participant in the 'old' or 'young' age group
  - the columns `word`, `length_in_letters`, `written_frequency`, and `word_category` describe properties of the stimulus for a given observation (i.e., the word)
  - the column `rt_lexdec` contains the response time for a lexical decision task
  - the column `rt_naming` contains the response time for a word naming task

::: {.content-visible when-format="revealjs"}
### `head(df_eng)`
:::

```{r}
#| label: tbl-df_eng
#| tbl-cap: df_eng
#| echo: false
df_eng %>% 
  head() %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling()
```

- is this data in @tbl-df_eng tidy?
- is this data too wide or too long?
- how might we make this data longer?

## Our goal



- we want to produce @fig-long

```{r}
#| echo: false
#| label: fig-long
#| fig-cap: Our plot to be reproduced
df_eng %>% 
  pivot_longer(
    cols = starts_with("rt_"), 
    names_to = "response", 
    values_to = "time"
  ) %>% 
  mutate(response = fct_recode(response,
                               "Lexical Decision Task" = "rt_lexdec", 
                               "Naming Task" = "rt_naming")) |> 
  ggplot() +
  aes(x = age_subject, 
      y = time, 
      colour = age_subject, 
      shape = age_subject) +
  facet_wrap(~response) +
  labs(title = "Response time by task and age group",
       x = "Age group", 
       y = "Response time (ms)") +
  geom_point(alpha = 0.4, position = position_jitter(0.2)) +
  theme_bw() +
  theme(legend.position = "none",
        text = element_text(size=16))
```
::: {.content-visible when-format="revealjs"}

###

:::

- the two continuous variables `rt_lexdec` and `rt_naming` appear in facets
  + `facet_wrap()` takes a *categorical* variable as its argument, and produces a facet of each category
- so we need a categorical variable which contains the levels `lexdec` and `naming`
  + and a *continuous* variable that contains the corresponding response time


## `pivot_longer()`

- `tidyr` function `pivot_longer()` converts a wide data table to a longer format
  + converts the names of specified columns into the values of new a categorical column
  + and combines the values of those columns into a new column

::: {.content-visible when-format="revealjs"}

```{r}
#| echo: true
df_eng_long <- 
  df_eng %>% 
  pivot_longer(
    cols = starts_with("rt_"), 
    names_to = "response", 
    values_to = "time"
  )
```

### 
:::

```{r}
#| echo: true
df_eng_long <- #<1>
  df_eng %>% #<2>
  pivot_longer( #<3>
    cols = starts_with("rt_"),  #<4>
    names_to = "response",  #<5>
    values_to = "time" #<6>
  )
```

1. Create a new object called `df_eng_long`, which contains...
2. `df_eng`, and then
3. make it longer
4. by taking columns that start with `rt_`
5. and create a variable called `response` that contains the names from `cols`
6. and create a variable called `time` that contains the values from `cols`

::: {.content-visible when-format="revealjs"}

##

:::

```{r}
df_eng_long |> head()
```



::: {.content-visible when-format="revealjs"}

##

:::

- let's compare the observations for the words `ace` and `act` in
  + `df_eng` (@tbl-eng)
  + `df_eng_longer ` (@tbl-longer)

:::: columns
::: {.column width="40%"}
```{r}
#| output-location: fragment
#| echo: false
#| tbl-cap: "`df_eng`"
#| label: tbl-eng
df_eng %>% 
  select(age_subject, word, rt_lexdec, rt_naming) |> 
  head(n = 4) %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling(font_size = 20)
```
:::

::: {.column width="10%"}

:::

::: {.column width="40%"}
```{r}
#| echo: false
#| output-location: column-fragment
#| label: tbl-longer
#| tbl-cap: "`df_eng |> pivot_longer(...)`"
df_eng_long %>% 
  select(age_subject, word, response, time) |> 
  head(n = 8) %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling(font_size = 20)
```
:::
::::

::: {.content-visible when-format="revealjs"}
## {.unlisted .unnumbered}
:::

- the two tables contain the exact same information
  + 8 response time values:
    + 4 for `rt_lexdec`
    + 4 for `rt_naming`

- this is an important realisation: we haven’t changed any data or observation values, we’ve just simply re-structured the organisation of the data points

### Plotting our tidy data

- now let's try to create our plot:
  + `age_subject` on the x-axis
  + `time` on the y-axis
  + `response` categories in facets
  

```{r}
#| echo: false
#| label: fig-eng
#| fig-cap: Response times per age group for the lexical decision task vs. naming task
df_eng_long %>% 
  ggplot() +
  aes(x = age_subject, 
      y = time, 
      colour = age_subject, 
      shape = age_subject) +
  facet_wrap(~response) +
  labs(title = "Response time by task and age group",
       x = "Age group", 
       y = "Response time (ms)") +
  geom_point(alpha = 0.4, position = position_jitter(0.2)) +
  theme_bw() +
  theme(legend.position = "none")
```

::: {.content-visible when-format="revealjs"}
## {.unlisted .unnumbered}
:::
::: callout-tip
### [Aufgabe @exm-tidy]: Tidy data

::: {#exm-help .custom}
::: nonincremental
Recreate @fig-eng
:::
:::
:::

# `pivot_wider()`

- it's more common to want to lengthen your data (take columns and turn their values into new rows)
  + but sometimes we also want to widen our data (take rows and turn their values into new columns)
- `tidyr` function `pivot_wider()` make datasets *wider* by increasing columns and reducing rows
  + this helps when one observation is spread across multiple rows
- let's try to make `df_eng` wider
  + for example, we could have a single row per *word*
    + with a single variable for the `young` subject's response and the `old` subject's response

## `pivot_wider()`

- pivot wider takes similar arguments to `pivot_longer()`, with some slight differences:

  + `id_cols` (optional): identifying columns (which columns uniquely identify each observation?)
  + `names_from`: what should we call the new column containing the previous column names (must be a categorical variable)? 
  + `names_prefix` (optional): prefix for the new column names (optional)
  + `values_from`: new column values

##

- let's create two new variables that take their names from `age_subject`, and their values from `rt_lexdec`. The result should look like @tbl-eng_wider.

```{r}
df_eng_wide <-
  df_eng %>%  
  select(-rt_naming) |> 
  pivot_wider(
    names_from = age_subject, #<1>
    values_from = rt_lexdec, #<2>
    names_prefix = "lexdec_" #<3>
  )
```

1. create new column names using the values in `age_subject`
2. create new observation values from `rt_lexdec`
3. add `lexdec_` to the beginning of the new column names

##

- let's compare the observations for the words `ace` and `act` in
  + `df_eng` (@tbl-eng)
  + `df_eng_longer ` (@tbl-longer)


:::: columns 
::: {.column width="45%"}

```{r}
#| echo: false
#| label: tbl-df_eng-2 
#| tbl-cap: "`df_eng`"
df_eng %>% 
  select(-rt_naming) |>
  filter(word %in% c("ace", "act")) |> 
  knitr::kable() %>% 
  kableExtra::kable_styling(font_size = 20)
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
```{r}
#| echo: false
#| eval: true
#| label: tbl-eng_wider
#| tbl-cap: "`df_eng_wider`"
df_eng %>%  
  select(-rt_naming) |>
  pivot_wider(
    names_from = age_subject,
    values_from = rt_lexdec,
    names_prefix = "lexdec_"
  ) %>% 
  filter(word %in% c("ace", "act")) |> 
  knitr::kable() %>% 
  kableExtra::kable_styling(font_size = 20)
```
:::
::::

- again, we haven’t changed any data or observation values, we’ve just simply re-structured the organisation of the data points


::: {.content-visible when-format="revealjs"}
##
:::

::: callout-warning

## Unique values

We've removed `rt_naming` because it also has a unique value per word per age group, so not removing it means we don't change the length of our dataset (still one row per word per age group), we just change the width and introduce `NA` values for `lexdec_young` for old subjects and `NA` values for `lexdec_old` for young subjects. If we hadn't removed it, our first 6 rows would've looked like @tbl-eng_wider_na. Compare this to the output in @tbl-eng_wider, do you see the difference?

```{r}
#| echo: false
#| eval: true
#| label: tbl-eng_wider_na
#| tbl-cap: Wider `df_eng` data with NA's
df_eng %>%  
  # select(-rt_naming) |>
  pivot_wider(
    names_from = age_subject,
    values_from = rt_lexdec,
    names_prefix = "lexdec_"
  ) %>% 
  filter(word %in% c("ace", "act")) |> 
  knitr::kable() %>% 
  kableExtra::kable_styling(font_size = 20)
```

:::

# Learning objectives 🏁 {.unnumbered .unlisted}

Today we learned...

- about wide versus long data  ✅
- how to make wide data longer ✅
- how to make long data wider  ✅


# Homework

We'll stick with the `df_eng` dataset for these tasks.

1. Using `pivot_wider` to create `rt_naming` new variables: `naming_old` and `naming_young` which containg the naming response times for old and young participants, respectively. Hint: you will need to remove `rt_lexdec`. The resulting data frame should have 2284 observations and 6 variables.

::: {.content-visible when-format="revealjs"}
## 
:::

2. Recreate @fig-old_young. Hint: you will need `pivot_wider()`. 

```{r}
#| echo: false
#| eval: true
#| label: fig-old_young
#| fig-cap: Scatterplot of lexical decision task response times per word for old versus young participants
df_eng_wide |> 
  ggplot() +
  aes(x = lexdec_young, y = lexdec_old, colour = word_category) +
  geom_point()
```


::: {.content-visible when-format="revealjs"}
## 
:::


3. Why do we need `df_eng_wide` dataset to produce @fig-old_young? In other words, why is `df_eng_wide` the appropriate structure but not `df_eng_long` for such a scatterplot?


::: {.content-visible when-format="revealjs"}
## 
:::

4. Using `df_eng_long` and the `summarise()` function we saw in the last section, reproduce the summary below:

```{r}
#| echo: false
df_eng_long |> 
  drop_na() |> 
  summarise(
    mean = mean(time),
    sd = sd(time),
    .by = response
  )
```

Hint: do you need to remove `NA`s (we saw how to do this in the last section)?



# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
RStudio.Version()$release_name
```


Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.9.0.463 (Desert Sunflower).

```{r}
sessionInfo()
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::
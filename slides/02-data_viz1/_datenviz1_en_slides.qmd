---
title: "Datenvisualiserung 1"
subtitle: "Distributions"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 2 - Datenvisualisierung 1" 
lang: en
date: "10/25/2023"
date-format: "Class date ddd mmm, DD, YYYY"
date-modified: last-modified
format:
  html:
    output-file: dataviz1_en_longform.html
    include-after-body: ../../custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
  revealjs: 
    output-file: dataviz1_slides.html
    include-after-body: custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    ## smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    ## logo: logos/hu_logo.png
    ## css: logo.css
    incremental: true
    ## number-sections: true
    toc: true
    toc-depth: 1
    toc-title: 'Überblick'
    number-sections: true
    number-depth: 1
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    ## chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
  pdf:
    output-file: dataviz1_en.pdf
    toc: true
    number-sections: true
    colorlinks: true
    code-overflow: wrap
    execute:
      out-width: "75%"
bibliography: ../../references.bib
csl: ../../apa.csl
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```


# Wiederholung {.unnumbered .unlisted}

Last week we...

-   installed R and RStudio
-   created our first R script
-   did simple arithmetic with objects and vectors

## Wiederholung {.unnumbered .unlisted}

```{r}
x <- c(1,2,3)
y <- sum(1,2,3)
```

<!-- https://rviews.rstudio.com/2017/12/04/how-to-show-r-inline-code-blocks-in-r-markdown/ -->

- what do the vectors `x` and `y` contain?

-   The object `x` contains `` `r 
x` ``.
-   The object `y` contains `` `r 
y` ``.

# Heutige Ziele {.unnumbered}

Today we will learn...

-   what dataframes are
-   the difference between categorical and continuous data
-   how to produce plots with `ggplot`
-   choose the right plot for our data

## Lust auf mehr? {.unnumbered}

-   Chapter 2 (Data Visualisation) in @wickham_r_2023, up until section 2.4
-   Chapter 3 (Data Visualisation) in @nordmann_applied_2022

## Vorbereitung {.unnumbered}

In your RProject folder...

-   create a new folder called `moodle`
    +   download the Moodle materials from today and save them there
-   create a new folder in `notes` called `02-datenviz1`
-   open a new `.R` script
    +   save it in the new folder 

### Packages

-   Pakete (installiert und) ladt
    -   `tidyverse`
    -   `languageR`
    -   `ggthemes`
    -   `patchwork`

```{r}
#| eval: false
#| code-line-numbers: false
# in the CONSOLE: install packages if needed
install.packages("tidyverse")
install.packages("languageR")
install.packages("ggthemes") # for customising our plots
install.packages("patchwork") # plot layouts
```

```{r}
#| code-line-numbers: false
# Pakete laden
library(tidyverse)
library(languageR)
library(ggthemes)
library(patchwork)
```

```{r}
#| echo: false
pacman::p_load(
  knitr,
  kableExtra
)
```

# Data frames

- data frames are a collection of variables, where
  + each variable is one column
  + each row is a single observation/data point
  + each cell in a row is linked
- data frames are just like spreadsheets, but are rectangular

- different words for data frames:
  + data frame
  + dataset
  + tibble (in the `tidyverse`)
  
## Talking about datasets

- when we talk about our data, we use certan words to refer to different parts:

-   a **variable**: a quantity, quality, or property you can measure
-   a **value**: the state of a variable when you measure it
-   an **observation**: set of measurements made under similar conditions
    -   will contain several values each associated with a variable
    -   an observation for a single variable is sometimes called a *data point*
-   **tabular data** is a set of values, each associated with a variable and an observation
    -   tabular data is *tidy* if each value is placed in its own *cell*, each variable in its own column, and each observation in its own row


## Categorical and continuous variables

-   how we visual the distribution of a variable depends on what type of data it represents: *categorical* or *numerical*
-   a variable is *categorical* if it can take a small set of values that can be grouped together
  + e.g., old/young, short/tall, grammatical/ungrammatical, L1/L2-speaker
-   a variable is *numerical* (i.e., quantitative) if it can take on a wide range of numerical values
    -   and it would make sense to add, subtract, compute the mean, etc.
    -   can be *continuous* (decimal points make sense, e.g., 1.5cm)
    -   or *discrete* (decimal points do *not* make sense, e.g., 1.5 children doesn't make sense)
    + age, height, reaction times, format frequencies

- we produce different plots depending on what type of variables we want to visualise

# Lexical Decision Task

- our first dataset contains data from a lexical decision task (LDT)

- in the LDT, participants press a button to indicate whether a word is a real word or a pseudoword

::: {.content-visible when-format="revealjs"}
```{r eval = T, fig.env = "figure", out.width="100%", fig.align = "center"}
#| echo: false

library(magick)
magick::image_read(here::here("media/lexical_decision_task_testabledotorg.png"))
```
:::

::: {.content-visible when-format="pdf"}
```{r eval = T, fig.env = "figure", out.width="100%", fig.align = "center", fig.cap="Source: https://www.testable.org/wp-content/uploads/2022/11/Lexical_decision_task-1024x576.png"}
#| echo: false

library(magick)
magick::image_read(here::here("media/lexical_decision_task_testabledotorg.png"))
```
:::

::: {.content-hidden when-format="revealjs"}
```{r eval = T, fig.env = "figure", out.width="100%", fig.align = "center"}
#| echo: false

library(magick)
magick::image_read(here::here("media/lexical_decision_task_testabledotorg.png"))
```
:::

## LDT variables

- common variables collected in a lexical decision task experiment are:
  + reaction time
  + accuracy (correct/incorrect)
  + word category (e.g., real/pseudo, noun/verb)
  + word frequency

- additional variables that might be collected could be:
  + participant demographics (e.g., age, L1/L2, gender)

# `lexdec` dataset

- `languageR` is a companion package for the textbook @baayen_analyzing_2008
  + contains linguistic datasets, e.g., `lexdec`

- the `lexdec` dataset contains data for a lexical decision task in English
  + we will be working with variables such as reaction times and accuracy

## `lexdec` variables

- a list of some of the variables is included in @tbl-lexdec

```{r}
#| label: tbl-lexdec
#| tbl-cap: "Data dictionary for `df_lexdec`: Lexical decision latencies elicited from 21 subjects for 79 English concrete nouns, with variables linked to subject or word."
#| echo: false

# dput(names(df_lexdec))

tribble(
  ~"variable", ~"description",
  "Subject", "a factor for the subjects",
  "RT", "a numeric vector for reaction times in milliseconds",
  "Trial", "a numeric vector for the rank of the trial in the experimental list.",
  "Sex", "a factor with levels F (female) and M (male).",
  "NativeLanguage", "a factor with levels English and Other, distinguishing between native and nonnative speakers of English",
) %>% 
  kable() %>% 
  kable_styling()
```

## LDT research questions

- before we conduct an experiment, we have research questions that we want to answer with the data
  + today we'll address the following question:
    + do the reaction times differ between native and non-native speakers?

## Load the data

-   our data is available in the `lanaugeR` package we've already loaded
    -   to print the data, just type the name of the dataset and run it
- below we only see a few variables, but you should see more in your console

```{r}
#| output-location: fragment
#| eval: false
lexdec
```

```{r}
#| echo: false
head(lexdec[1:8])
```

-   how many variables do we have? observations?

### Save data as an object

- to save the data in our Environment, we have to assign it a name
  + let's call it `df_lexdec`, which means "data frame lexical decision"

```{r}
df_lexdec <- lexdec
```

- now we see it in our Enrivonment
  + double-click on it to view it in the Editor pane
  
## Relevant variables

-   Among the variables we have are:
    1.  **Subject**: participant ID
    2.  **RT**: logged reaction times
    3.  **NativeLanguage**: the native language of the participant
    4.  **Word**: what word was presented
    5.  **Class**: if the word was animal or plant

::: callout-tip
### [Aufgabe @exm-help]: `?lexdec`

::: {#exm-help .custom}
::: nonincremental
Find out what the other variables represent by running `?lexdec` in the console.
:::
:::
:::

## Ultimate goal

-   our ultimate goal today is to produce the following visualisation of the data
    -   the plot shows the distribution (`count`) of reaction times and native language of the participants

```{r}
#| echo: false
#| warning: false

ggplot(df_lexdec, aes(x = exp(RT), fill = NativeLanguage)) +
  geom_histogram(position="identity", alpha = .2) +
  labs(title = "Reaction times by speaker group",
       x = "Reaction time (ms)") +
  scale_fill_colorblind() +
  theme_minimal() +

ggplot(df_lexdec, aes(x = NativeLanguage, fill = NativeLanguage)) +
  geom_bar() +
  labs(title = "Observations per speaker group",
       x = "Native language") +
  scale_fill_colorblind() +
  theme_minimal() +
  
  plot_annotation(tag_levels = "A") & 
  
  theme(legend.position = 'bottom') 
```

# Creating plots with `ggplot2`

-   the `tidyverse` is a collection of packages that facilitate data tidying and visualisation
    -   when we load the `tidyverse`, this collection of packages is automatically loaded
-   the `ggplot2` package is a `tidyverse` package that builds plots in layers

## `ggplot2` Schichten {.unlisted .unnumbered}

```{r}
#| echo: false
#| label: fig-layers
#| fig-cap: Example of layers in a ggplot figure
#| fig-align: center
#| fig-asp: .75

  ggplot(df_lexdec) +
  labs(title = "Layer 1") +

ggplot(df_lexdec) +
  aes(x = exp(RT), fill = NativeLanguage) +
  labs(title = "Layer 2") +

ggplot(df_lexdec) +
  aes(x = exp(RT)) +
  geom_histogram(fill = "darkblue") +
  labs(title = "Layer 3") +

ggplot(df_lexdec) +
  aes(x = exp(RT)) +
  geom_histogram(fill = "darkblue") +
  labs(title = "Layer 4",
       x = "Reaction times (ms)",
       y = "N observations") +

ggplot(df_lexdec) +
  aes(x = exp(RT)) +
  geom_histogram(fill = "darkblue") +
  labs(title = "Layer 5",
       x = "Reaction times (ms)",
       y = "N observations") +
  theme_minimal() +

ggplot(df_lexdec) +
  aes(x = exp(RT), fill = NativeLanguage) +
  geom_histogram(alpha = .7) +
  labs(title = "Layer 5",
       x = "Reaction times (ms)",
       y = "N observations") +
  scale_fill_manual(values = c("darkblue", "darkred")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  
  plot_layout(nrow = 2)
```


## Layer 1: empty canvas

-   the first layer with the function `ggplot()` is like an empty canvas

```{r}
#| output-location: fragment
ggplot(data = df_lexdec)
```

## Layer 2: mapping aesthetics

-   next we tell `ggplot()` how to visually represent our variables
    -   we add the `+` to the end of our line of code, and on a new line of code use the function `aes()` to define our *aethetics*
-   our first aesthetic maps reaction times (`RT`) on the x-axis (the bottom of the plot)
    -   we wrap the logged `RT` in the `exp()` function to get RTs in milliseconds (for reasons we won't discuss)

```{r}
#| output-location: column-fragment
ggplot(data = df_lexdec) +
  aes(x = exp(RT))
```

::: callout-tip
### [Aufgabe @exm-layer2]: Mapping aesthetics

::: {#exm-layer2 .custom}
::: nonincremental
1.  Produce the plot so far
:::
:::
:::

## Layer 3: adding observations

-   we don't see any observations (i.e., the bars) on the plot, why not?
    -   we haven't told `ggplot()` how to visualise them
-   we have to define a **geom**: the *geom*etrical object that a plot uses to represent data
    -   in `ggplot2`, geom functions start with `geom_`
    -   we often describe plots in terms of types of geoms they use, e.g., bar charts use bar geoms (`geom_bar()`), line charts use line geoms (`geom_line()`), scatterplots use a point geom (`geom_point()`), etc.

::: {.content-visible when-format="revealjs"}
## Layer 3: adding observations {.unlisted .unnumbered}
:::

-   let's create our histogram using the geom `geom_histogram()`

```{r}
#| output-location: fragment

ggplot(data = df_lexdec) +
  aes(x = exp(RT)) +
  geom_histogram()
```



::: {.content-visible when-format="revealjs"}
## {.smaller}
:::


::: callout-note
We got the following message when including `geom_point()`:

> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

This is just telling us about the width of our bars: each bar represents a range of possible reaction time values
  + `bins = 30` simply means there are 30 bars, we can change this have more or fewer bars by including e.g., `bins = 20` or `bins = 100` inside `geom_histogram()`
:::

```{r}
#| output-location: fragment
#| code-fold: true

ggplot(
  data = df_lexdec,
  mapping = aes(x = exp(RT))
) +
  labs(title = "with geom_histogram(bins = 20)") +
  geom_histogram(bins = 20) +

  ggplot(
  data = df_lexdec,
  mapping = aes(x = exp(RT))
) +
  labs(title = "with geom_histogram(bins = 100)") +
  geom_histogram(bins = 100)
```

## Adding aesthetics {.smaller}

-   seeing the distribution of reaction times in general is useful
    -   but we usually want to compare groups
    -   e.g., differences between native and non-native speakers, or between types of words
-   we also have native language as a variable, how might we visualise this in our plot?

```{r}
#| output-location: fragment
#| code-fold: true
ggplot(
  data = df_lexdec,
  aes(x = exp(RT), fill = NativeLanguage)
) +
  geom_histogram()
```

::: {.content-visible when-format="revealjs"}
## Stacking versus layering histograms {.unlisted .smaller}
:::

- we see the red bars and the blue bars, but is the blue histogram layered on top of the red?
  + or are the red bars stacked in top of the blue bars?
- it's the latter
  + let's make is so that the blue histogram is layered on top of the red

```{r}
#| output-location: fragment
#| code-fold: true

ggplot(
  data = df_lexdec,
  aes(x = exp(RT), fill = NativeLanguage)
) +
  labs(title = "Stacked") +
  geom_histogram() + 
  
ggplot(
  data = df_lexdec,
  aes(x = exp(RT), fill = NativeLanguage)
) +
  labs(title = "Layered: position = \"identity\"") +
  geom_histogram(position = "identity") +
  
  
  plot_layout(guides = "collect") & theme(legend.position = 'bottom') 
```


## Global and local aesthetics

- in our final plot, the colour of the histograms is slightly transparent
  + we can control this by adding the argument `alpha = 0.3` to `geom_histogram()`
  + alpha takes any other value between 0 and 1

::: {.content-visible when-format="revealjs"}
## Global and local aesthetics
:::

::: callout-tip
### [Aufgabe @exm-local]: Histogram transparency

::: {#exm-local .custom}
::: nonincremental
Play around with the transparency of the histogram geom. Choose the alpha-value you prefer. The output should look something like this:

```{r}
#| echo: false
#| warning: false
ggplot(
  data = df_lexdec,
  aes(x = exp(RT), fill = NativeLanguage)
) +
  geom_histogram(position = "identity", alpha = 0.3)
```
:::
:::
:::

## Customising our plot

-   we can improve our axis and legend labels, and also add titles using the `labs()` function
-   let's also use the function `scale_fill_colorblind()` from the `ggthemes` package
    -   this creates colourblind-safe colours
-   we'll also use the `theme_minimal()` function from `ggplot2`; what does this do?

- try to add the following to your plot
  + change the labels accordingly
  + and add meaningful comments to the code using `#`

```{r}
#| eval: false
labs(title = "Plot title",
     x = "x-axis label",
     y = "y-axis label") +
  scale_fill_colourblind() +
  theme_minimal()
```

## Commenting

- the code and plot should look something like this:

```{r}
#| output-location: fragment
#| warning: false

# histogram of reaction times by native language
ggplot(data = df_lexdec) +
  aes(x = exp(RT), fill = NativeLanguage) + # set aesthetics
  labs(title = "Reaction times by L1",
     x = "Reaction times (ms)") +
  geom_histogram(position = "identity", alpha = 0.3) +
  scale_fill_colorblind() + # make fill colorblind friendly
  theme_minimal() # set plot theme
```

## Saving plots

-   we can store plots in our Environment, just like we can store numbers and data as objects
    + you can name objects anything you want
    + but it's wise to make the name meaningful (e.g., *not* `fig1` or `xyz`)
- let's name this plot `fig_lexdec_rt`, for "figure lexical decision task reaction times"

```{r}
#| warning: false
#| eval: true
#| echo: false

fig_lexdec_rt <-
  ggplot(data = df_lexdec) +
  aes(x = exp(RT), fill = NativeLanguage) + # set aesthetics
  labs(title = "Reaction times by L1",
     x = "Reaction times (ms)") +
  geom_histogram(position = "identity", alpha = 0.3) +
  scale_fill_colorblind() + # make fill colorblind friendly
  theme_minimal() # set plot theme
```

::: callout-tip
### [Aufgabe @exm-save]: `ggplot2` review

::: {#exm-save .custom}
::: nonincremental
1.  Save our final plot as an object called `fig_lexdec_rt`
:::
:::
:::

## Barplots

- copy the code for your histogram
- make the following changes to render our barplot
  + remove the name assignment (`fig_lexdec_rt`)
  + on the x-axis we want `NativeLanguage`
  + replace `geom_histogram()` with `geom_bar()`
    + remove the arguments for the histogram (not position or alpha)
  + change the labels accordingly
  + save the plot as an object with some meaningful name (e.g., `fig_lexdec_l1`)

## 

- the plot should look something like this:

```{r}
#| echo: false
fig_lexdec_l1 <-
  ggplot(data = df_lexdec) +
  aes(x = NativeLanguage, fill = NativeLanguage) + # set aesthetics
  labs(title = "Observations per L1",
     x = "Native Language") +
  geom_bar() +
  scale_fill_colorblind() + # make fill colorblind friendly
  theme_minimal() # set plot theme

fig_lexdec_l1
```


## Combining plots

-   one reason to save your plot as an object is so that we can call on it later
    -   i.e., you can produce the plot at one point in your document, but decide to only print it in the rendered report lower down
-   another reason is so that we can combine multiple plots
    -   this can be done with a variety of packages
    -   but let's try it with the `patchwork` package
      + use `+` to connect two plots side-by-side
      + or `/` to present them one on top of the other

### Combining plots with `+`

```{r}
fig_lexdec_rt + fig_lexdec_l1
```

### Combining plots with `/`

```{r}
fig_lexdec_rt / fig_lexdec_l1
```

# Deciding on a geom

- why do we use histogram for reaction times, and a barplot for native language?
- what types of variables are these?
  + reaction time is continuous
  + native language is categorical
- we use histograms to visualise distributions of *continuous* variables
- we use barplots to visualise distributions of *cateogrical* variables
- knowing what we want to visualise (e.g., distributions) and what type of variable we have (i.e., continuous, categorical) helps us decide which type of plot to produce
- often, trying to draw your plot on paper before you start in R is a good idea (I often do this, too)

# Exercises

These exercises should be also be included in your script if you upload it to Moodle. Working through the class materials will prepare you for these tasks.

1. Reproduce our histogram as a *density plot* by replacing `geom_histogram()` with `geom_density()`
    + what does this type of plot show?

2. Produce a barplot that shows the number of observations per word class (hint: you'll need the variable `Class` from our dataset).

3. Print your density plot and class barplot one on top of the other using the `patchwork` package

##

4. Reproduce the following plots as exactly as you can (hint: you will need the `position = "dodge"` argument):

```{r}
#| echo: false
fig_lexdec_class <-
  ggplot(data = df_lexdec) +
  aes(x = Class, fill = NativeLanguage) + # set aesthetics
  labs(title = "Observations per word class/native language",
     x = "Word class") +
  geom_bar(position = "dodge") +
  scale_fill_colorblind() + # make fill colorblind friendly
  theme_minimal() # set plot theme

fig_lexdec_class
```

# Heutige Ziele {.unnumbered .unlisted}

Today we learned...

-   what data frames are
-   the difference between categorical and continuous data
-   how to produce plots with `ggplot`
-   choose the right plot for our data

# Session Info {.unnumbered}

Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.3.0.386 (Cherry Blossom).

```{r}
sessionInfo()
```

```{r}
#| eval: false
#| echo: false
quarto::datenviz_render(output_format = "all")
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::

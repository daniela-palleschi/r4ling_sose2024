---
title: "Datenvisualisierung 3"
subtitle: "Darstellung der zusammenfassenden Statistik"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 10 - Datenvisualisierung 3" 
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    output-file: data_viz2_blatt_DE.html
    include-after-body: ../../custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  revealjs: 
    output-file: data_viz2_folien_DE.html
    include-after-body: ../../custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    number-depth: 1
    toc: false
    toc-depth: 1
    toc-title: 'Überblick'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    code-overflow: wrap
    execute:
      out-width: "80%"
      fig-asp: .618
      fig-align: centre
bibliography: ../../references.bib
csl: ../../apa.csl
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, ## evaluate chunks
                      echo = T, ## 'print code chunk?'
                      message = F, ## 'print messages (e.g., warnings)?'
                      error = T, ## continueeven when error encountered
                      warning = F) ## don't print warnings
```

# Lernziele {.unnumbered}

Heute werden wir lernen...

- Boxplots zu erstellen und zu interpretieren
- Mittelwerte und Standardabweichungen zu visualisieren

# Ressourcen {.unnumbered}

- [Abschnitt 2.5 (Visualisierung von Beziehungen)](https://r4ds.hadley.nz/data-visualize#visualizing-relationships) in @wickham_r_2023
- [Kapitel 4 (Darstellung von zusammenfassenden Statistiken)](https://psyteachr.github.io/introdataviz/representing-summary-statistics.html) in @nordmann_data_2022
- Abschnitte 3.5-3.9 in @winter_statistics_2019

# Einrichten {.unnumbered}

## Pakete {.unnumbered}

```{r}
pacman::p_load(tidyverse,
               here,
               janitor,
               ggthemes,
               patchwork)
```

```{r}
#| echo: false
# load magick for the slides
pacman::p_load(magick)
theme_set(theme_bw())
```

## Daten {.unnumbered}

```{r}
df_eng <- read_csv(
  here(
    "daten",
    "languageR_english.csv"
  )
) |> 
  clean_names() |> 
  rename(
    rt_lexdec = r_tlexdec,
    rt_naming = r_tnaming
  )
```

# Wiederholung

:::: columns


::: {.column width="50%"}
- Betrachten Sie jede Abbildung in @fig-distributions
  + Wie viele Variablen werden in jeder Abbildung dargestellt?
  + welche *Typen* von Variablen sind es?
  + Welche zusammenfassende(n) Statistik(en) wird/werden in jedem Diagramm dargestellt?

:::

::: {.column width="50%"}

```{r}
#| echo: false
fig_hist <-
  df_eng |> 
  ggplot(aes(x = rt_lexdec, fill = age_subject)) +
  geom_histogram(binwidth = 50, alpha = 0.5, position = "identity") +
  labs(
    title = "Histogram",
       x = "LDT reaction time (ms)",
       y = "Count",
    fill = "Age group") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()

fig_dens <-
  df_eng |> 
  ggplot(aes(x = rt_lexdec, fill = age_subject, colour = age_subject)) +
  geom_density(alpha=.2) +
  labs(
    title = "Density plot",
      x = "LDT reaction time (ms)",
       y = "Density",
    color = "Age group",
    fill = "Age group") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()

fig_scat <-
  df_eng |> 
  ggplot(aes(x = rt_lexdec, y = rt_naming)) +
  geom_point(aes(color = age_subject, shape = age_subject), alpha = .3) +
  # geom_smooth(method = "lm") +
  labs(
    title = "Scatterplot",
       x = "LDT reaction time (ms)",
       y = "Naming reaction time (ms)",
    color = "Age group",
    shape = "Age group") +
  scale_color_colorblind() +
  theme_minimal()

fig_bar <-
  df_eng |> 
  ggplot(
       aes(x = age_subject, fill = word_category)) +
  geom_bar() +
    labs(
    title = "Barplot (stacked)",
    x = "Age Group",
    y = "Count",
    fill = "Word Category"
  ) +
  scale_fill_colorblind() +
  theme_minimal()

fig_bar_dodge <-
  df_eng |> 
  ggplot(
        aes(x = age_subject, fill = word_category)) +
  geom_bar(position="dodge") +
    labs(
    title = "Barplot (dodged)",
    x = "Age Group",
    y = "Count",
    fill = "Word Category"
  ) +
  scale_fill_colorblind() +
  theme_minimal()
```

```{r}
#| echo: false
#| label: fig-distributions
#| fig-cap: "Different plots types"
#| fig-width: 8
#| fig-asp: .8

(fig_hist + fig_dens) /
  (fig_scat + fig_bar_dodge) +
  plot_annotation(tag_levels = "A") +
  theme(plot.title = element_blank()) 
```
:::
::::

# Darstellung von zusammenfassenden Statistiken

- Modus und Bereich werden in Histogrammen und Dichteplots visualisiert
- die Anzahl der Beobachtungen wird in Balkendiagrammen visualisiert

## Boxplot

:::: columns

::: {.column width="60%"}
- auch bekannt als Box-and-Whisker-Plots, enthalten
  + eine Box
  + eine Linie in der Mitte der Box
  + Linien, die an beiden Enden der Box herausragen (die 'Whisker')
  + manchmal Punkte
  
:::

::: {.column width="40%"}
```{r}
#| echo: false
boxplot(iris$Sepal.Width)
```

:::

::::

---

:::: columns

::: {.column width="60%"}
- Betrachten Sie @fig-boxplot
  + identifiziere jeden dieser 4 Aspekte des Plots
  + können Sie erraten, was jeder dieser Aspekte darstellen könnte und wie Sie die Darstellung interpretieren sollten?

:::

::: {.column width="40%"}
```{r}
#| ouput-location: column-fragment
#| echo: false
#| code-line-numbers: "|4"
#| label: fig-boxplot
#| fig-cap: "Boxplot of `df_eng` (body mass by age_subject)"

df_eng |> 
  ggplot(aes(x = age_subject, y = rt_lexdec, colour = age_subject)) +
  geom_boxplot() +
  labs(title = "Boxplot",
    x = "Age group",
    y = "LDT Reaction time (ms)",
    color = "Age group"
  ) +
  scale_color_colorblind() +
  theme_minimal() +
  theme(
    legend.position = "none"
  )
```
:::
::::

---

- Boxplots vermitteln eine Menge Informationen in einer einzigen Visualisierung
  + Die Box selbst stellt den *Interquartilsbereich* (IQR; der Bereich der Werte, der zwischen den mittleren 50% der Daten liegt) dar.
    + Die Grenzen der Box repräsentieren Q1 (1. Quartil, unter dem 25% der Daten liegen) und Q3 (3. Quartil, über dem 25% der Daten liegen)
  + die Linie in der Mitte des Boxplots stellt den *Median* dar
    + auch Q2 genannt (2. Quartil; der mittlere Wert, über/unter dem 50% der Daten liegen)
  + Die Whisker repräsentieren `1,5*IQR` von Q1 (unterer Whisker) oder Q3 (oberer Whisker)
  + Punkte, die außerhalb der Whisker liegen, stellen Ausreißer dar (d. h. Extremwerte, die außerhalb des IQR liegen).

---

- @fig-winter-boxplot-hist [@winter_statistics_2019, S. 59] zeigt die Beziehung zwischen einem Histogramm und einem Boxplot

::: {.content-visible when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @winter_statistics_2019 (all rights reserved)"
#| fig-cap-location: bottom
#| label: fig-winter-boxplot-hist

# invert colours for dark mode in slides
library(magick)
magick::image_negate(magick::image_read(here::here("media/Winter_2019_boxplot.png")))
```
:::

::: {.content-hidden when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @winter_statistics_2019 (all rights reserved)"
#| fig-cap-location: bottom
magick::image_read(here::here("media/Winter_2019_boxplot.png"))
```
:::

---

- @fig-wickham-boxplot-hist [@wickham_r_2023] hat einen ähnlichen Vergleich, einschließlich eines Streudiagramms

::: {.content-visible when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @wickham_r_2023 (all rights reserved)"
#| fig-cap-location: bottom
#| label: fig-wickham-boxplot-hist

# invert colours for dark mode in slides
y <- magick::image_read(here::here("media/Wickham_boxplot.png"))

magick::image_negate(y)
```
:::

::: {.content-hidden when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @wickham_r_2023 (all rights reserved)"
#| fig-cap-location: bottom
magick::image_read(here::here("media/Wickham_boxplot.png"))
```
:::

### `geom_boxplot()`

- Die Funktion `geom_boxplot()` von `ggplot2` erzeugt Boxplots
  + sie benötigt eine numerische Variable als `x` oder `y` Achse (@fig-geom-boxplot-y)

```{r}
#| eval: false
#| 
df_eng |> 
  ggplot(aes(y = rt_lexdec)) +
  geom_boxplot() 
```


```{r}
#| label: fig-geom-boxplot-y
#| fig-cap: "A boxplot for all observations of a continuous variable"
#| fig-asp: .618
#| fig-width: 5
#| echo: false
df_eng |> 
  ggplot(aes(y = rt_lexdec)) +
  geom_boxplot() +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
```

---

- für Boxplots verschiedener Gruppen: eine kategorische Variable entlang der anderen Achse (@fig-geom-boxplot)

```{r}
#| label: fig-geom-boxplot
#| fig-cap: "A boxplot for two groups"
#| fig-width: 5
#| fig-asp: .618
df_eng |> 
  ggplot(aes(x = age_subject, y = rt_lexdec)) +
  geom_boxplot() +
  theme_bw()
```

### Gruppierter Boxplot

- Wir können gruppierte Boxplots erstellen, um mehr Variablen zu visualisieren
  + einfach eine neue Variable mit `colour` oder `fill` ästhetisch zuordnen

```{r}
#| output-location: column-fragment
#| fig-width: 7
#| label: df_boxplot_group
#| fig-cap: A grouped boxplot
df_eng |> 
  ggplot(aes(x = age_subject, y = rt_lexdec, 
             colour = word_category)) +
  geom_boxplot() +
  labs(
    x = "Age group",
    y = "LDT reaction time (ms)",
    color = "Word type"
  ) +
  scale_colour_colorblind() +
  theme_bw()
```

# Visualisierung des Mittelwerts

- In der Regel wollen wir auch den Mittelwert mit der Standardabweichung darstellen.
  + Wie können wir das tun?

## Fehlerbalkenplots

:::: columns

::: {.column width="50%"}
- Diese Diagramme bestehen aus 2 Teilen: 
  + der Mittelwert, visualisiert mit `geom_point()`
  + ein Maß für die Streuung, visualisiert mit "geom_errorbar()".
- für diesen Kurs werden wir die Standardabweichung verwenden
- @fig-errorbar ist das, was wir heute erzeugen werden
:::

::: {.column width="50%"}
```{r}
#| ouput-location: column-fragment
#| echo: false
#| label: fig-errorbar
#| fig-width: 5
#| fig-cap: "Errorbar plot of `df_eng` (body mass by age_subject)"

df_eng |> 
  summarise(mean = mean(rt_lexdec),
            sd = sd(rt_lexdec),
            N = n(),
            .by = c(age_subject)) |> 
  ggplot(aes(x = age_subject, y = mean, colour = age_subject, shape = age_subject)) +
  # geom_point(data = df_eng, alpha = .4, position = position_jitterdodge(.5), aes(x = age_subject, y = rt_lexdec)) +
  geom_point(size = 3) +
  geom_errorbar(width = .5, aes(ymin=mean-sd, ymax=mean+sd)) +
  labs(title = "Mean LDT time (+/-1 SD)",
    x = "Age group",
    y = "Reaction time (ms)",
    color = "Age group"
  ) +
  scale_color_colorblind() +
  theme_bw() +
  theme(
    legend.position = "none"
  )
```
:::
::::

### Berechnung der zusammenfassenden Statistik

- müssen wir zunächst den Mittelwert und die Standardabweichung berechnen
  + gruppiert nach den Variablen, die wir visualisieren wollen
+ Wie kann man den Mittelwert und die Standardabweichung von `rt_lexdec` nach `age_subject` berechnen?

```{r}
#| code-fold: true
#| code-summary: "Click here to see how"
sum_eng <- df_eng |> 
  summarise(mean = mean(rt_lexdec),
            sd = sd(rt_lexdec),
            N = n(),
            .by = age_subject) |> 
  arrange(age_subject, age_subject)
```

- Diese Zusammenfassung können wir dann in `ggplot()` mit den entsprechenden ästhetischen Zuordnungen und Geomen einfügen

### Plotting mean

:::: columns

::: {.column width="50%"}
- Zunächst werden die Mittelwerte mit `geom_point()` dargestellt.
:::

::: {.column width="50%"}
```{r}
#| output-location: fragment
#| code-line-numbers: "3,4"
sum_eng |> 
  ggplot() +
  aes(x = age_subject, y = mean) +
  geom_point()
```
:::
::::

### Hinzufügen von Fehlerbalken

:::: Spalten

::: {.column width="50%"}
- Fügen wir nun unsere Fehlerbalken hinzu, die 1 Standardabweichung über und unter dem Mittelwert darstellen
- wir tun dies mit `geom_errorbar()`
  + nimmt `ymin` und `ymax` als Argumente
  + In unserem Fall sind dies `mean-/+sd`.
:::

::: {.column width="50%"}
```{r}
#| output-location: fragment
#| code-line-numbers: "5,6"
sum_eng |> 
  ggplot() +
  aes(x = age_subject, y = mean) +
  geom_point() +
  geom_errorbar(aes(ymin = mean-sd, 
                    ymax = mean+sd))
```
:::
::::

---

- Wenn wir weitere Anpassungen hinzufügen, erhalten wir @fig-errorbar-custom

```{r}
#| code-fold: true
#| label: fig-errorbar-custom
#| fig-cap: Customised errorbar
#| output-location: column
sum_eng |> 
  ggplot() +
  aes(x = age_subject, y = mean, 
      colour = age_subject, shape = age_subject,
      ymin=mean-sd, ymax=mean+sd) +
  geom_point(size = 3) +
  geom_errorbar(width = .5) +
  labs(title = "Mean LDT times (+/-1SD)",
    x = "Age group",
    y = "Reaction time (ms)",
    color = "Age group"
  ) +
  scale_color_colorblind() +
  theme_bw() +
  theme(
    legend.position = "none"
  )
```

# Barplot von Mittelwerten: Finger weg! {.smaller}

- Sie werden sehr oft Balkendiagramme von Mittelwerten sehen
  + aber es gibt viele Gründe, warum dies eine schlechte Idee ist!!

- Der Balkenplot hat ein schlechtes Daten-Tinten-Verhältnis, d.h. die Menge der Datentinte geteilt durch die Gesamttinte, die zur Erstellung der Grafik benötigt wird
  + Was ist, wenn es nur sehr wenige oder gar keine Beobachtungen in der Nähe von Null gibt? Wir verbrauchen eine Menge Tinte, wo es keine Beobachtungen gibt!    
  + Außerdem deckt der Balken nur den Bereich ab, in dem die untere *Hälfte* der Beobachtungen liegt; ebenso viele Beobachtungen liegen über dem Mittelwert!

- Fehlerbalken allein sind keine Lösung: auch hier wird eine Menge Information verborgen
  + ein guter Grund, die Rohdatenpunkte *immer* zu visualisieren, unabhängig davon, welche zusammenfassende Darstellung Sie erstellen

# Lernziele 🏁 {.unnumbered .unlisted}

In diesem Abschnitt haben wir gelernt, wie man...

- Boxplots erstellen und interpretieren ✅
- Fehlerbalkendiagramme erstellen und interpretieren ✅

## Hausaufgabe {.unnumbered}

### Boxplot mit Facette {.unnumbered}

::: nicht-inkrementell
1. Erzeugen Sie einen Plot namens `fig_boxplot`, der ein Boxplot der `df_eng` Daten ist, mit:
    + `age_subject` auf der `x`-Achse
    + `rt_naming` auf der `y`-Achse
    + `age_subject` als `colour` *oder* `fill` (wähle eine, es gibt keine falsche Wahl)
    + `Wort_Kategorie` in zwei Facetten mit `facet_wrap()` aufgetragen
    + die von Ihnen gewählte `theme_`-Einstellung (z.B. `theme_bw()`; für weitere Optionen siehe [hier](https://ggplot2.tidyverse.org/reference/ggtheme.html))
    
```{r}
#| echo: false
fig_boxplot <-
df_eng |> 
  ggplot() +
  aes(x = age_subject, y = rt_naming,
      colour = age_subject) +
  facet_wrap(~word_category) +
  labs(
    title = "Benennung von RTs nach Altersgruppen",
    x = "Altersgruppe",
       y = "Benennungs-RT (ms)") +
  geom_boxplot() +
  scale_color_colorblind() +
  theme_bw() +
  theme(legend.position = "none") 
```

:::
  
### Errorbar plot {.unnumbered}

::: nonincremental
2. Versuchen Sie, @fig-error-naming zu reproduzieren. Hinweis: Sie werden die Variable `rt_naming` aus `df_eng` verwenden.
:::
```{r}
#| echo: false
fig_error_naming <- df_eng |> 
  drop_na() |> 
  summarise(
    mean = mean(rt_naming),
    sd = sd(rt_naming),
    .by = age_subject
  ) |> 
  ggplot() +
  aes(x = age_subject, y = mean, 
             colour = age_subject, shape = age_subject,
      ymin = mean-sd, ymax = mean+sd) +
    labs(
      title = "Mittlere Benennungszeiten (+/-1 SD)",
      y = "Benennungs-RTs (ms)",
      x = "Altersgruppe"
  ) +
  geom_point(size = 2) +
  geom_errorbar(width = .3) +
  scale_colour_colorblind() +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| echo: false
#| label: fig-error-naming
#| fig-cap: "Plot to be reproduced"
#| fig-width: 5
#| fig-asp: .618
fig_error_naming
```

### Patchwork {.unnumbered}

::: nicht-inkrementell
3. Verwenden Sie das Paket `patchwork`, um Ihren Boxplot und Ihre Fehlerbalkenplots nebeneinander darzustellen. Es sollte ungefähr so aussehen wie @fig-patchwork. Hinweis: Wenn Sie die "tag-level" ("A" und "B") zu den Plots hinzufügen möchten, müssen Sie `+ plot_annotation(tag_level = "A")` aus `patchwork` hinzufügen.
:::

```{r}
#| label: fig-patchwork
#| fig-cap: Combined plots with `patchwork`
#| echo: false
#| fig-width: 8
#| fig-asp: .5
fig_boxplot + fig_error_naming + plot_annotation(tag_levels = "A")
```


# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```


Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.9.0.463 (Desert Sunflower).

```{r}
print(sessionInfo(),locale = F)
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::

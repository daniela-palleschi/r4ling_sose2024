---
title: "Datenvisualisierung 3"
subtitle: "Darstellung der zusammenfassenden Statistik"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 10 - Datenvisualisierung 3" 
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    output-file: data_viz2_blatt_EN.html
    include-after-body: ../../custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  revealjs: 
    output-file: data_viz2_folien_EN.html
    include-after-body: ../../custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    number-depth: 1
    toc: false
    toc-depth: 1
    toc-title: 'Überblick'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    code-overflow: wrap
    execute:
      out-width: "80%"
      fig-asp: .618
      fig-align: centre
bibliography: ../../references.bib
csl: ../../apa.csl
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, ## evaluate chunks
                      echo = T, ## 'print code chunk?'
                      message = F, ## 'print messages (e.g., warnings)?'
                      error = T, ## continueeven when error encountered
                      warning = F) ## don't print warnings
```

# Learning objectives {.unnumbered}

Today we will learn to...

- Boxplots zu erstellen und zu interpretieren
- Mittelwerte und Standardabweichungen zu visualisieren

# Resources {.unnumbered}

- [Section 2.5 (Visualising relationsips)](https://r4ds.hadley.nz/data-visualize#visualizing-relationships) in @wickham_r_2023
- [Chapter 4 (Representing summary statistics)](https://psyteachr.github.io/introdataviz/representing-summary-statistics.html) in @nordmann_data_2022
- Sections 3.5-3.9 in @winter_statistics_2019.

# Set-up {.unnumbered}

## Packages {.unnumbered}

```{r}
pacman::p_load(tidyverse,
               here,
               janitor,
               ggthemes,
               patchwork)
```

```{r}
#| echo: false
# load magick for the slides
pacman::p_load(magick)
theme_set(theme_bw())
```

## Data {.unnumbered}

```{r}
df_eng <- read_csv(
  here(
    "daten",
    "languageR_english.csv"
  )
) |> 
  clean_names() |> 
  rename(
    rt_lexdec = r_tlexdec,
    rt_naming = r_tnaming
  )
```

# Review: Visualising distributions

:::: columns


::: {.column width="50%"}
- look at each figure in @fig-distributions
  + how many variables are visualised in each
  + what *types* of variables are they?
  + what summary statistic(s) is/are represented in each plot?

:::

::: {.column width="50%"}

```{r}
#| echo: false
fig_hist <-
  df_eng |> 
  ggplot(aes(x = rt_lexdec, fill = age_subject)) +
  geom_histogram(binwidth = 50, alpha = 0.5, position = "identity") +
  labs(
    title = "Histogram",
       x = "LDT reaction time (ms)",
       y = "Count",
    fill = "Age group") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()

fig_dens <-
  df_eng |> 
  ggplot(aes(x = rt_lexdec, fill = age_subject, colour = age_subject)) +
  geom_density(alpha=.2) +
  labs(
    title = "Density plot",
      x = "LDT reaction time (ms)",
       y = "Density",
    color = "Age group",
    fill = "Age group") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()

fig_scat <-
  df_eng |> 
  ggplot(aes(x = rt_lexdec, y = rt_naming)) +
  geom_point(aes(color = age_subject, shape = age_subject), alpha = .3) +
  # geom_smooth(method = "lm") +
  labs(
    title = "Scatterplot",
       x = "LDT reaction time (ms)",
       y = "Naming reaction time (ms)",
    color = "Age group",
    shape = "Age group") +
  scale_color_colorblind() +
  theme_minimal()

fig_bar <-
  df_eng |> 
  ggplot(
       aes(x = age_subject, fill = word_category)) +
  geom_bar() +
    labs(
    title = "Barplot (stacked)",
    x = "Age Group",
    y = "Count",
    fill = "Word Category"
  ) +
  scale_fill_colorblind() +
  theme_minimal()

fig_bar_dodge <-
  df_eng |> 
  ggplot(
        aes(x = age_subject, fill = word_category)) +
  geom_bar(position="dodge") +
    labs(
    title = "Barplot (dodged)",
    x = "Age Group",
    y = "Count",
    fill = "Word Category"
  ) +
  scale_fill_colorblind() +
  theme_minimal()
```

```{r}
#| echo: false
#| label: fig-distributions
#| fig-cap: "Different plots types"
#| fig-width: 8
#| fig-asp: .8

(fig_hist + fig_dens) /
  (fig_scat + fig_bar_dodge) +
  plot_annotation(tag_levels = "A") +
  theme(plot.title = element_blank()) 
```
:::
::::

# Representing summary statistics

- the mode and range are visualised in the histogram and density plots
- the number of observations is visualised in barplots

## Boxplot

:::: columns

::: {.column width="60%"}
- a.k.a. box-and-whisker plots, contain
  + a box
  + line in the middle of the box
  + lines sticking out of either end of the box (the 'whiskers')
  + sometimes dots
  
:::

::: {.column width="40%"}
```{r}
#| echo: false
boxplot(iris$Sepal.Width)
```

:::

::::

---

- look at @fig-boxplot
  + identify each of these 4 aspects of the plot
  + can you guess what each of this might represent, and how you should interpret the plot?


```{r}
#| ouput-location: column-fragment
#| echo: false
#| code-line-numbers: "|4"
#| label: fig-boxplot
#| fig-cap: "Boxplot of `df_eng` (body mass by age_subject)"

df_eng |> 
  ggplot(aes(x = age_subject, y = rt_lexdec, colour = age_subject)) +
  geom_boxplot() +
  labs(title = "Boxplot",
    x = "Age group",
    y = "LDT Reaction time (ms)",
    color = "Age group"
  ) +
  scale_color_colorblind() +
  theme_minimal() +
  theme(
    legend.position = "none"
  )
```


---

- boxplots communicate a lot of information in a single visualisation
  + the box itself represents the *interquartile range* (IQR; the range of values between the middle 50% of the data lie)
    + the boundaries of the box represent Q1 (1st quartile, below which 25% of the data lie) and Q3 (3rd quartile, above which 25% of the data lie)
  + the line in the middle of the boxplot represents the *median*
    + also called Q2 (2nd quartile; the middle value above/below which 50% of the data lie)
  + the whiskers represent `1.5*IQR` from Q1 (lower whisker) or Q3 (upper whisker)
  + Any dots that lie beyond the whiskers represent outliers (i.e., extreme values that are outside the IQR)

---

- @fig-winter-boxplot-hist [@winter_statistics_2019, p. 59] shows the relationship between a histogram versus a boxplot

::: {.content-visible when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @winter_statistics_2019 (all rights reserved)"
#| fig-cap-location: bottom
#| label: fig-winter-boxplot-hist

# invert colours for dark mode in slides
library(magick)
magick::image_negate(magick::image_read(here::here("media/Winter_2019_boxplot.png")))
```
:::

::: {.content-hidden when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @winter_statistics_2019 (all rights reserved)"
#| fig-cap-location: bottom
magick::image_read(here::here("media/Winter_2019_boxplot.png"))
```
:::

---

- @fig-wickham-boxplot-hist [@wickham_r_2023] has a similar comparison, including a scatterplot

::: {.content-visible when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @wickham_r_2023 (all rights reserved)"
#| fig-cap-location: bottom
#| label: fig-wickham-boxplot-hist

# invert colours for dark mode in slides
y <- magick::image_read(here::here("media/Wickham_boxplot.png"))

magick::image_negate(y)
```
:::

::: {.content-hidden when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @wickham_r_2023 (all rights reserved)"
#| fig-cap-location: bottom
magick::image_read(here::here("media/Wickham_boxplot.png"))
```
:::

### `geom_boxplot()`

- `geom_boxplot()` function from `ggplot2` produces boxplots
  + it needs a numerical variable as the `x` or `y` axis (@fig-geom-boxplot-y)

```{r}
#| eval: false
#| 
df_eng |> 
  ggplot(aes(y = rt_lexdec)) +
  geom_boxplot() 
```


```{r}
#| label: fig-geom-boxplot-y
#| fig-cap: "A boxplot for all observations of a continuous variable"
#| fig-asp: .618
#| fig-width: 5
#| echo: false
df_eng |> 
  ggplot(aes(y = rt_lexdec)) +
  geom_boxplot() +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
```

---

- for boxplots of different groups: a categorical variable along the other axis (@fig-geom-boxplot)

```{r}
#| label: fig-geom-boxplot
#| fig-cap: "A boxplot for two groups"
#| fig-width: 5
#| fig-asp: .618
df_eng |> 
  ggplot(aes(x = age_subject, y = rt_lexdec)) +
  geom_boxplot() +
  theme_bw()
```

### Grouped boxplot

- we can produced grouped boxplots to visualise more variables
  + just map a new variable with `colour` or `fill` aesthetic.

```{r}
#| output-location: column-fragment
#| fig-width: 7
#| label: df_boxplot_group
#| fig-cap: A grouped boxplot
df_eng |> 
  ggplot(aes(x = age_subject, y = rt_lexdec, colour = word_category)) +
  geom_boxplot() +
  labs(
    x = "Age group",
    y = "LDT reaction time (ms)",
    color = "Word type"
  ) +
  scale_colour_colorblind() +
  theme_bw()
```

# Visualing the mean

- we typically also want to plot the mean with standard deviation
  + How might we do this?

## Errorbar plots

:::: columns

::: {.column width="50%"}
- these plots have 2 parts: 
  + the mean, visualised with `geom_point()`
  + some measure of dispersion visualised with `geom_errorbar()`
- for this course we'll use the standard deviation
- @fig-errorbar is what we'll produce today
:::

::: {.column width="50%"}
```{r}
#| ouput-location: column-fragment
#| echo: false
#| label: fig-errorbar
#| fig-width: 5
#| fig-cap: "Errorbar plot of `df_eng` (body mass by age_subject)"

df_eng |> 
  summarise(mean = mean(rt_lexdec),
            sd = sd(rt_lexdec),
            N = n(),
            .by = c(age_subject)) |> 
  ggplot(aes(x = age_subject, y = mean, colour = age_subject, shape = age_subject)) +
  # geom_point(data = df_eng, alpha = .4, position = position_jitterdodge(.5), aes(x = age_subject, y = rt_lexdec)) +
  geom_point(size = 3) +
  geom_errorbar(width = .5, aes(ymin=mean-sd, ymax=mean+sd)) +
  labs(title = "Mean LDT time (+/-1 SD)",
    x = "Age group",
    y = "Reaction time (ms)",
    color = "Age group"
  ) +
  scale_color_colorblind() +
  theme_bw() +
  theme(
    legend.position = "none"
  )
```
:::
::::

### Computing summary statistics

- we need to first calculate the mean and standard deviation
  + grouped by whatever variables we want to visualise
+ how can we compute the `mean` and `sd` of `rt_lexdec` by `age_subject`?

```{r}
#| code-fold: true
#| code-summary: "Click here to see how"
sum_eng <- df_eng |> 
  summarise(mean = mean(rt_lexdec),
            sd = sd(rt_lexdec),
            N = n(),
            .by = age_subject) |> 
  arrange(age_subject, age_subject)
```

- we can then feed this summary into `ggplot()` with the appropriate aesthetic mapping and geoms

### Plotting mean

:::: columns

::: {.column width="50%"}
- let's first plot the means using `geom_point()`
:::

::: {.column width="50%"}
```{r}
#| output-location: fragment
#| code-line-numbers: "3,4"
sum_eng |> 
  ggplot() +
  aes(x = age_subject, y = mean) +
  geom_point()
```
:::
::::

### Adding errorbars

:::: columns

::: {.column width="50%"}
- now let's add our errorbars representing 1 standard deviation above and below the mean
- we do this with `geom_errorbar()`
  + takes `ymin` and `ymax` as its arguments
  + for us, these will be `mean-/+sd`, respectively
:::

::: {.column width="50%"}
```{r}
#| output-location: fragment
#| code-line-numbers: "5,6"
sum_eng |> 
  ggplot() +
  aes(x = age_subject, y = mean) +
  geom_point() +
  geom_errorbar(aes(ymin = mean-sd, 
                    ymax = mean+sd))
```
:::
::::

---

- if we add some further customisations, we get @fig-errorbar-custom

```{r}
#| code-fold: true
sum_eng |> 
  ggplot(aes(x = age_subject, y = mean, colour = age_subject, shape = age_subject)) +
  # geom_point(data = df_eng, alpha = .4, position = position_jitterdodge(.5), aes(x = age_subject, y = rt_lexdec)) +
  geom_point(size = 3) +
  geom_errorbar(width = .5, aes(ymin=mean-sd, ymax=mean+sd)) +
  labs(title = "Mean LDT times (+/-1SD)",
    x = "Age group",
    y = "Reaction time (ms)",
    color = "Age group"
  ) +
  scale_color_colorblind() +
  theme_bw() +
  theme(
    legend.position = "none"
  )
```

# Barplot of means: stay away!

- you will very often see barplots of mean values
  + but there are lots of reasons why this is a bad idea!!

- the barplot has a terrible data-ink ratio, i.e., the amount of data-ink divided by the total ink required to produce the graphic
  + What if there are very few or no observations near zero? We're using a lot of ink where there aren't any observations!    + also, the bar only covers the space where the bottom *half* of the observations lie; just as many observations lie above the mean!

- errorbars alone are not the answer: this also hides a lot of information
  + it's a good reason to *always* visualise your raw datapoints regardless of what summary plot you produce

# Learning objects 🏁 {.unnumbered .unlisted}

In this section we learned how to...

- produce and interpret boxplots ✅
- produce and interpret errorbar plots ✅

# Homework {.unnumbered}

## Boxplot with facet {.unnumbered}

::: nonincremental
1. Produce a plot called `fig_boxplot`, which is a boxplot of the `df_eng` data, with:
    + `age_subject` plotted on the `x` axis
    + `rt_naming` on the y-axis
    + `age_subject` as `colour` *or* `fill` (choose one, there's no wrong choice)
    + `word_category` plotted in two facets using `facet_wrap()`
    + whichever `theme_` setting you choose (e.g., `theme_bw()`; for more options see [here](https://ggplot2.tidyverse.org/reference/ggtheme.html))
    
```{r}
#| echo: false
fig_boxplot <-
df_eng |> 
  ggplot() +
  aes(x = age_subject, y = rt_naming,
      colour = age_subject) +
  facet_wrap(~word_category) +
  labs(
    title = "Naming RTs by Age group",
    x = "Age group",
       y = "Naming RT (ms)") +
  geom_boxplot() +
  scale_color_colorblind() +
  theme_bw() +
  theme(legend.position = "none") 
```

:::
  
## Errorbar plot {.unnumbered}

::: nonincremental
2. Try to reproduce @fig-error-naming. Hint: you will use the `rt_naming` variable from `df_eng`.
:::
```{r}
#| echo: false
fig_error_naming <- df_eng |> 
  drop_na() |> 
  summarise(
    mean = mean(rt_naming),
    sd = sd(rt_naming),
    .by = age_subject
  ) |> 
  ggplot() +
  aes(x = age_subject, y = mean, 
             colour = age_subject, shape = age_subject,
      ymin = mean-sd, ymax = mean+sd) +
  labs(
    title = "Mean naming times (+/-1 SD)",
    y = "Naming RTs (ms)",
    x = "Age group"
  ) +
  geom_point(size = 2) +
  geom_errorbar(width = .3) +
  scale_colour_colorblind() +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| echo: false
#| label: fig-error-naming
#| fig-cap: "Plot to be reproduced"
#| fig-width: 5
#| fig-asp: .618
fig_error_naming
```

## Patchwork {.unnumbered}

::: nonincremental
3. Using the `patchwork` package, plot your boxplot and your errorbar plots side by side. It should look something like @fig-patchwork. Hint: if you want to add the "tag levels" ("A" and "B") to the plots, you need to add `+ plot_annotation(tag_level = "A")` from `patchwork`.
:::

```{r}
#| label: fig-patchwork
#| fig-cap: Combined plots with `patchwork`
#| echo: false
#| fig-width: 8
#| fig-asp: .5
fig_boxplot + fig_error_naming + plot_annotation(tag_levels = "A")
```



# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```


Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.9.0.463 (Desert Sunflower).

```{r}
print(sessionInfo(),locale = F)
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::
